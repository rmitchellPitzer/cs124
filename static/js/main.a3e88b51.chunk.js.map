{"version":3,"sources":["modules/dataController/actions.js","modules/sorting/sortingAlgorithm.js","modules/dataController/reducer.js","modules/dataController/store.js","modules/dataController/AppDataController.js","components/Action Commands/ActionButton.js","components/Header.js","modules/db/index.js","modules/db/firebaseConfig.js","modules/dataController/constants.js","modules/dataController/TaskDataController.js","components/Tasks/Task.js","components/Tasks/TaskList.js","components/Section/SectionButton.js","components/Section/FilterButton.js","components/Section/SectionBar.js","components/Section/SectionContainer.js","components/Action Commands/ActionMenuItem.js","components/Action Commands/ActionMenu.js","components/Undo/UndoButton.js","modules/dataController/TaskOrderController.js","components/SortMenu/addFilterButton.js","components/SortMenu/CloseMenuButton.js","components/SortMenu/SortEntry/EntryOrderButton.js","components/SortMenu/SortEntry/SortCriteriaDropDown.js","components/SortMenu/SortEntry/isAscendingButton.js","components/SortMenu/SortEntry/DeleteButton.js","components/SortMenu/SortEntry/SortEntryContainer.js","components/SortMenu/SortMenuContainer.js","App.js","modules/dataController/DataSyncController.js","modules/setup/initSubscriptions.js","index.js"],"names":["TOGGLE_TASK_COMPLETION","TOGGLE_TODO_LIST","TOGGLE_COMPLETED_LIST","SHOW_MENU","HIDE_MENU","UNDO_TASK","SHOW_UNDO","HIDE_UNDO","UPDATE_TASKS","UPDATE_SORTING_FIELDS","TOGGLE_SORT_FIELD_MENU","HIDE_SORT_FIELD_MENU","applySorting","sortDataList","tasks","i","length","sortData","sortFunction","getSortFunction","sortTasks","prevSortData","sortBySecondaryKey","map","x","sort","a","b","isAscending","prevSortFunction","valuesAreEqual","field","console","log","sortByName","sortByTime","sortByPriority","taskA","taskB","comparison","text","localeCompare","priority","creationDate","initialState","stack","sortingFields","showUndo","showCompleted","showTodo","showMenu","showSortMenu","toggleTaskCompletion","state","id","newTasks","task","find","isCompleted","undoTask","pop","toggleCompletedList","toggleToDoList","hideMenu","hideUndo","updateTasks","oldTasks","sortingAlgorithm","updateSortingFields","hideSortFieldMenu","toggleSortFieldMenu","store","createStore","action","type","payload","AppDataController","dispatch","getState","handleOnClick","ActionButton","class","onClick","icon","faPlus","Header","props","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","COLLECTION_NAME","DEFAULT_DOC_ID","TASK_SUBCOLLECTION","collectionRef","db","collection","getTask","doc","TaskDataController","update","get","data","uuidv4","set","Date","now","delete","where","docs","s","ref","filter","Task","classes","alt","value","onChange","e","checked","event","currentTarget","updateTaskText","handleTextEvent","TaskList","key","connect","isOpen","isToDo","showToDo","faAngleDown","faAngleRight","toggleTodoList","toggleButton","FilterButton","className","faFilter","SectionBar","sectionTitle","ownProps","todo","showContainer","completed","ActionMenuItem","command","menuItems","createTask","deleteAllCompleted","setTimeout","faMinus","ActionMenu","closeMenu","menuItem","UndoButton","TaskOrderController","getSortFields","sortFilters","isAlreadyEnabled","enableFilter","old","newField","prevField","f","updateSortFields","hasName","hasTime","hasPriority","addSortField","sortFields","getDoc","newSortingFields","newIndex","currentIndex","getCurrentIndexOfField","entry","splice","push","addFilterSection","addRandomField","AddFilterButton","hideSortMenu","CloseMenuButton","newOrder","changeSortFieldOrder","result","onOrderChange","parseInt","index","_","SortCriteriaDropDown","changeSortField","change","changeAscending","IsAscendingButton","DeleteButton","fieldName","removeSortField","SortEntryContainer","menuIsActive","undoIsActive","_db","_taskSubscription","_sortSubscrption","query","this","onSnapshot","snapshot","updateTasksAction","updateSortingFieldsAction","DataSyncController","setTaskSubscription","setSortSubscription","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3e88b51.chunk.js","sourcesContent":["export const CREATE_TASK = \"createTask\"\r\nexport const DELETE_TASK = \"deleteTask\"\r\nexport const UPDATE_TASK_TEXT = \"updateTaskText\"\r\nexport const TOGGLE_TASK_COMPLETION = \"toggleTaskCompletion\"\r\nexport const DELETE_ALL_COMPLETED_TASK = \"deleteAllCompletedTasks\"\r\nexport const TOGGLE_TODO_LIST = \"toggleTodoList\"\r\nexport const TOGGLE_COMPLETED_LIST = \"toggleCompletedList\"\r\nexport const SHOW_MENU = \"showMenu\"\r\nexport const HIDE_MENU = \"hideMenu\"\r\nexport const UNDO_TASK = \"undoTask\"\r\nexport const SHOW_UNDO = \"showUndo\"\r\nexport const HIDE_UNDO = \"hideUndo\"\r\nexport const UPDATE_TASKS = \"updateTasks\"\r\nexport const UPDATE_SORTING_FIELDS = \"updateSortingFields\"\r\nexport const TOGGLE_SORT_FIELD_MENU = \"toggleSortFieldMenu\"\r\nexport const HIDE_SORT_FIELD_MENU = \"hideSortFieldMenu\"\r\n\r\nexport const showUndoAction = () => ({type:SHOW_UNDO})\r\nexport const hideUndoAction = () => ({type:HIDE_UNDO})\r\nexport const undoTaskAction = () => ({type:UNDO_TASK})\r\nexport const showMenuAction = () => ({type:SHOW_MENU})\r\nexport const hideMenuAction = () => ({type:HIDE_MENU})\r\nexport const createTaskAction = () => ({type:CREATE_TASK})\r\nexport const deleteTaskAction = (id) => ({type:DELETE_TASK, payload:{id}})\r\nexport const updateTaskTextAction = (id,text) => ({type: UPDATE_TASK_TEXT,payload: {id,text}})\r\nexport const toggleTaskCompletionAction = (id) => ({type: TOGGLE_TASK_COMPLETION,payload:{id}})\r\nexport const deleteAllCompletedTasksAction = () => ({type: DELETE_ALL_COMPLETED_TASK})\r\nexport const toggleCompletedListAction = () => ({type:TOGGLE_COMPLETED_LIST})\r\nexport const toggleToDoListAction = () => ({type:TOGGLE_TODO_LIST})\r\nexport const updateTasksAction = (tasks) => ({type:UPDATE_TASKS,payload:{tasks}})\r\nexport const updateSortingFieldsAction = (sortingFields) => ({type:UPDATE_SORTING_FIELDS, payload: {sortingFields}})\r\nexport const toggleSortFieldAction = () => ({type:TOGGLE_SORT_FIELD_MENU})\r\nexport const hideSortFieldAction = () => ({type:HIDE_SORT_FIELD_MENU})","/*\r\n\r\n@ISortData: {\r\nfield:\"name\"|\"time\"|\"priority\",\r\nisAscending:Boolean\r\n}\r\n\r\n@ITask: {\r\n    _id:String (UUIDV4);\r\n    isCompleted:Boolean;\r\n    text:String;\r\n    creationDate:Number (Unix);\r\n    priority: Number;\r\n}\r\n */\r\n\r\nexport const NAME = \"name\"\r\nexport const TIME = \"time\"\r\nexport const PRIORITY = \"priority\"\r\n\r\nexport default function applySorting(sortDataList,tasks) {\r\n    for (let i = 0; i < sortDataList.length; i++) {\r\n        const sortData = sortDataList[i]\r\n        const sortFunction = getSortFunction(sortData)\r\n        if (isFirstSortField(i)) {\r\n           sortTasks(tasks,sortFunction,sortData)\r\n        }\r\n        else {\r\n            const prevSortData = sortDataList[i - 1]\r\n            const prevSortFunction = getSortFunction(prevSortData)\r\n            sortBySecondaryKey(prevSortData,prevSortFunction,sortData,tasks,sortFunction)\r\n        }\r\n\r\n    }\r\n    return tasks.map(x => x)\r\n}\r\n\r\nfunction isFirstSortField(index) {\r\n    return index == 0\r\n}\r\n\r\nfunction sortTasks(tasks,sortFunction,sortData) {\r\n    tasks.sort((a, b) => sortFunction(a, b, sortData.isAscending))\r\n}\r\n\r\nfunction sortBySecondaryKey(prevSortData,prevSortFunction,sortData,tasks,sortFunction) {\r\n    tasks.sort((a,b) => {\r\n        if (valuesAreEqual(prevSortData,prevSortFunction,a,b)) {\r\n            return sortFunction(a,b,sortData.isAscending)\r\n        }\r\n    })\r\n}\r\n\r\nfunction valuesAreEqual(sortData,sortFunction,a,b) {\r\n    return sortFunction(a,b,sortData.isAscending) == 0\r\n}\r\n\r\nfunction getSortFunction({field,isAscending}) {\r\n    console.log(field)\r\n    switch (field) {\r\n        case NAME : return sortByName;\r\n        case TIME: return sortByTime;\r\n        case PRIORITY: return sortByPriority;\r\n        default: return\r\n    }\r\n}\r\n\r\nfunction sortByName(taskA,taskB,isAscending) {\r\n    const comparison = taskA.text.localeCompare(taskB.text)\r\n    return isAscending ? comparison : -1 * comparison\r\n}\r\n\r\nfunction sortByPriority(taskA,taskB,isAscending) {\r\n    const comparison = taskA.priority - taskB.priority\r\n    return isAscending ? -1 * comparison : comparison\r\n}\r\n\r\nfunction sortByTime(taskA,taskB,isAscending) {\r\n    const comparison = taskA.creationDate - taskB.creationDate\r\n    return isAscending ? comparison : -1 * comparison\r\n}","/* eslint-disable no-lone-blocks */\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    HIDE_MENU,\r\n    HIDE_UNDO,\r\n    SHOW_MENU,\r\n    SHOW_UNDO,\r\n    TOGGLE_COMPLETED_LIST,\r\n    TOGGLE_TASK_COMPLETION,\r\n    TOGGLE_TODO_LIST,\r\n    UNDO_TASK,\r\n    UPDATE_TASKS,\r\n\r\n    UPDATE_SORTING_FIELDS,\r\n    TOGGLE_SORT_FIELD_MENU,\r\n    HIDE_SORT_FIELD_MENU\r\n} from './actions';\r\n\r\nimport sortingAlgorithm from \"../sorting/sortingAlgorithm\"\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    stack:[],\r\n    sortingFields:[],\r\n    showUndo: false,\r\n    showCompleted: false,\r\n    showTodo: true,\r\n    showMenu: false,\r\n    showSortMenu: false\r\n}\r\n\r\nfunction createTask(state) {\r\n    const id = uuidv4()\r\n    const task = {\r\n        text:\"\",\r\n        isCompleted:false,\r\n        id,\r\n        priority: -1,\r\n        creationDate: Date.now()\r\n    }\r\n    const newState = state.tasks.map(x => x)\r\n    newState.push(task)\r\n    const tasks = sortingAlgorithm(state.sortingFields,newState)\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\nfunction deleteTask(state,id) {\r\n    const tasks = state.tasks.filter(task => task.id !== id)\r\n    return {\r\n        ...state,\r\n        tasks \r\n    }\r\n}\r\n\r\nfunction updateTaskText(state,{id,text}) {\r\n    const newTasks = state.tasks.map(x => x)\r\n    const task = newTasks.find(task => task.id === id)\r\n    if (!task) return state\r\n    task.text = text\r\n\r\n    const tasks = sortingAlgorithm(state.sortingFields,newTasks)\r\n\r\n\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\nfunction toggleTaskCompletion(state,id) {\r\n    const newTasks = state.tasks.map(x => x)\r\n    const task = newTasks.find(task => task.id === id)\r\n    task.isCompleted = !task.isCompleted\r\n\r\n    return {\r\n        ...state,\r\n        tasks:newTasks \r\n    }\r\n\r\n}\r\n\r\nfunction deleteAllCompletedTasks(state) {\r\n    const stack = state.stack.map(x => x)\r\n    stack.push(state.tasks)\r\n\r\n   const newTasks = state.tasks.filter(task => task.isCompleted !== true)\r\n   return {\r\n       ...state,\r\n       stack,\r\n       tasks:newTasks \r\n   }\r\n}\r\n\r\nfunction undoTask(state) {\r\n    const stack = state.stack.map(x => x)\r\n\r\n    return {\r\n        ...state,\r\n        tasks: stack.pop(),\r\n        stack \r\n    }\r\n}\r\n\r\nfunction toggleCompletedList(state) {\r\n    return {\r\n        ...state,\r\n        showCompleted: !state.showCompleted\r\n    }\r\n}\r\n\r\nfunction toggleToDoList(state) {\r\n    return {\r\n        ...state,\r\n        showTodo: !state.showTodo \r\n    }\r\n}\r\n\r\nfunction showMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu: true \r\n        }\r\n}\r\n\r\nfunction hideMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu:false \r\n    }\r\n}\r\n\r\nfunction showUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: true\r\n    }\r\n}\r\n\r\nfunction hideUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: false \r\n    }\r\n}\r\n\r\nfunction updateTasks(state,oldTasks) {\r\n    console.log(oldTasks)\r\n    const tasks = sortingAlgorithm(state.sortingFields,oldTasks)\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\nfunction updateSortingFields(state,{sortingFields}) {\r\n    const tasks = sortingAlgorithm(sortingFields,state.tasks)\r\n    console.log(\"I am updating\",sortingFields)\r\n\r\n    return {\r\n        ...state,\r\n        tasks,\r\n        sortingFields\r\n    }\r\n}\r\n\r\nfunction openSortFieldMenu(state) {\r\n    return {\r\n        ...state,\r\n        showSortMenu: true\r\n\r\n    }\r\n}\r\n\r\nfunction hideSortFieldMenu(state) {\r\n    return {\r\n        ...state,\r\n        showSortMenu: false\r\n    }\r\n}\r\n\r\nfunction toggleSortFieldMenu(state) {\r\n    return {\r\n        ...state,\r\n        showSortMenu: !state.showSortMenu\r\n    }\r\n}\r\n\r\nexport default function toDoReducer(state = initialState, action){\r\n    switch (action.type){\r\n        case TOGGLE_TASK_COMPLETION: return toggleTaskCompletion(state,action.payload.id)\r\n        case TOGGLE_TODO_LIST: return toggleToDoList(state)\r\n        case TOGGLE_COMPLETED_LIST: return toggleCompletedList(state)\r\n        case SHOW_MENU: return showMenu(state)\r\n        case HIDE_MENU: return hideMenu(state)\r\n        case UNDO_TASK: return undoTask(state)\r\n        case SHOW_UNDO: return showUndo(state)\r\n        case HIDE_UNDO: return hideUndo(state)\r\n        case UPDATE_TASKS: return updateTasks(state,action.payload.tasks)\r\n        case UPDATE_SORTING_FIELDS: return updateSortingFields(state,action.payload)\r\n        case TOGGLE_SORT_FIELD_MENU: return toggleSortFieldMenu(state)\r\n        case HIDE_SORT_FIELD_MENU: return hideSortFieldMenu(state)\r\n        default:\r\n            return state \r\n    }\r\n\r\n\r\n}\r\n","import {createStore} from \"redux\"\r\nimport rootReducer  from \"./reducer\"\r\n\r\nconst store = createStore(rootReducer)\r\nexport default store ","import {\r\n    hideMenuAction, hideSortFieldAction,\r\n    hideUndoAction,\r\n    showMenuAction,\r\n    showUndoAction,\r\n    toggleCompletedListAction,\r\n    toggleSortFieldAction,\r\n    toggleToDoListAction,\r\n    undoTaskAction\r\n} from \"./actions.js\"\r\nimport store from \"./store.js\"\r\n\r\nexport default class AppDataController {\r\n\r\n    static toggleTodoList() {\r\n        const action = toggleToDoListAction()\r\n        store.dispatch(action)\r\n    }\r\n    static showSortMenu() {\r\n        return store.getState().showSortMenu\r\n    }\r\n\r\n    static hideSortMenu() {\r\n        const action = hideSortFieldAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static toggleSortFieldMenu() {\r\n        const action = toggleSortFieldAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static showToDo() {\r\n        return store.getState().showTodo \r\n    }\r\n    \r\n    static showCompleted() {\r\n        return store.getState().showCompleted \r\n    }\r\n\r\n    static showMenu() {\r\n        const action = showMenuAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static closeMenu() {\r\n        const action = hideMenuAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static menuIsActive() {\r\n        return store.getState().showMenu \r\n    }\r\n\r\n    static toggleCompletedList() {\r\n        const action = toggleCompletedListAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static showUndo() {\r\n        const action = showUndoAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static hideUndo() {\r\n        const action = hideUndoAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static undoTask() {\r\n        const action = undoTaskAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static undoIsActive() {\r\n        return store.getState().showUndo \r\n    }\r\n\r\n}","import AppDataController from \"../../modules/dataController/AppDataController\"\r\nimport \"../../css/action_button.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction handleOnClick() {\r\n    AppDataController.showMenu()\r\n}\r\n\r\nexport default function ActionButton() {\r\n    return (\r\n        <button \r\n            class=\"action-button\"\r\n            onClick={handleOnClick}\r\n        >\r\n        <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../css/banner.css\"\r\n\r\n\r\nexport default function Header(props) {\r\n\r\n    return (\r\n        <div class=\"banner\">\r\n            <h1 class=\"title\"> Todoiz.IO</h1>\r\n        </div>\r\n    )\r\n}","import firebaseConfig from \"./firebaseConfig\"\r\nimport firebase from \"firebase/compat\";\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\nexport default firebase.firestore()","export default  {\r\n    apiKey: \"AIzaSyCcQ6XCOvMIA7pHME4bWBgy_7OVy_7XErA\",\r\n    authDomain: \"cs124-fall2021.firebaseapp.com\",\r\n    projectId: \"cs124-fall2021\",\r\n    storageBucket: \"cs124-fall2021.appspot.com\",\r\n    messagingSenderId: \"264318304667\",\r\n    appId: \"1:264318304667:web:4be8d27a02811b1ccd613e\"\r\n}","export const COLLECTION_NAME = \"todoiz.io\"\r\nexport const DEFAULT_DOC_ID = \"default\"\r\nexport const TASK_SUBCOLLECTION = \"tasks\"","import { createTaskAction, deleteAllCompletedTasksAction, deleteTaskAction, toggleTaskCompletionAction, updateTaskTextAction } from \"./actions\"\r\nimport store from \"./store.js\"\r\nimport db from \"../db/index\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {COLLECTION_NAME,DEFAULT_DOC_ID,TASK_SUBCOLLECTION} from \"./constants\"\r\n\r\n\r\nconst collectionRef = db.collection(COLLECTION_NAME)\r\n\r\n function getTask(id) {\r\n    return collectionRef.doc(DEFAULT_DOC_ID).collection(TASK_SUBCOLLECTION).doc(id)\r\n}\r\n\r\n\r\n/*\r\nTask {\r\n\r\n    isCompleted: boolean;\r\n    text: string;\r\n    \r\n\r\n}\r\n*/\r\nclass TaskDataController {\r\n    static async updateTaskText(id,text) {\r\n        // DOC\r\n        const task = await getTask(id)\r\n        await task.update({\r\n                text\r\n            })\r\n    } \r\n\r\n    static async toggleTaskCompletion(id) {\r\n        const doc = getTask(id)\r\n        const task = await doc.get()\r\n        if (!task) return \r\n        const {isCompleted} = task.data()\r\n        await doc.update({\r\n            isCompleted:!isCompleted\r\n        })\r\n    }\r\n\r\n    static createTask() {\r\n        const id = uuidv4()\r\n        collectionRef.doc(DEFAULT_DOC_ID).collection(TASK_SUBCOLLECTION).doc(id).set({\r\n            isCompleted: false,\r\n            text: \"\",\r\n            id,\r\n            priority: -1,\r\n            creationDate: Date.now()\r\n        })\r\n\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        const task = await getTask(id)\r\n        if (!task) return\r\n        await task.delete() \r\n    }\r\n\r\n    static async deleteAllCompleted() {\r\n        const tasks = await collectionRef\r\n            .doc(DEFAULT_DOC_ID)\r\n            .collection(TASK_SUBCOLLECTION)\r\n            .where(\"isCompleted\",\"==\",true)\r\n            .get()\r\n\r\n        for (const task of tasks.docs) {\r\n            await task.ref.delete()\r\n        }\r\n    }\r\n\r\n    static todo() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === false)\r\n    }\r\n\r\n    static completed() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === true)\r\n    }\r\n}\r\n\r\n\r\nexport default TaskDataController","import \"../../css/task.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\"\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string \r\n}\r\n*/\r\nexport default function Task(props) {\r\n    const classes = `task-item ${props.isCompleted ? 'completed' : ''}`\r\n    return (\r\n        <div class={classes}>\r\n            <input \r\n                alt='task completion status' \r\n                class='checkbox' \r\n                type=\"checkbox\"\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id)}\r\n                checked= {props.isCompleted}\r\n            />\r\n            <input \r\n                class='task-text' \r\n                type='text' \r\n                alt='task text' \r\n                onChange= { (e) => handleTextEvent(props.id,e)}\r\n                value={props.text}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id,text)\r\n}\r\n\r\nfunction handleCheckBoxEvent(id) {\r\n    TaskDataController.toggleTaskCompletion(id)\r\n}","import Task from \"./Task\";\r\nimport \"../../css/container.css\"\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\nexport default function TaskList(props) {\r\n\r\n    return (\r\n        <div class='container scroll-container'>\r\n            {\r\n            props.tasks.map(task => {\r\n            return <Task \r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n            })\r\n            }\r\n        </div>   \r\n    )\r\n    \r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { connect } from \"react-redux\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\"\r\n\r\nfunction SectionButton(props) {\r\n    const icon = props.isOpen ? faAngleDown : faAngleRight\r\n    return (\r\n        <button class=\"drop-down\" onClick={(e) => handleOnClick(props.isToDo)}>\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}   \r\n\r\nfunction handleOnClick(isToDo) {\r\n    if (isToDo) {\r\n        AppDataController.toggleTodoList()\r\n    }\r\n    else AppDataController.toggleCompletedList()\r\n}\r\n\r\nfunction mapToState(state,{isToDo}) {\r\n    return {\r\n        isOpen: \r\n            isToDo ? AppDataController.showToDo() \r\n            : AppDataController.showCompleted()\r\n        }\r\n}\r\n\r\nexport default connect(mapToState)(SectionButton)","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport \"../../css/sort_button.css\"\r\n\r\nfunction toggleButton() {\r\n   AppDataController.toggleSortFieldMenu()\r\n}\r\n\r\nexport default function FilterButton(props) {\r\n   return  <button className=\"sort-button\" onClick={toggleButton}> <FontAwesomeIcon icon={faFilter}/> </button>\r\n}\r\n\r\n\r\n\r\n\r\n","import \"../../css/bar.css\"\r\nimport \"../../css/todo.css\"\r\nimport \"../../css/completed.css\"\r\nimport SectionButton from \"./SectionButton\"\r\nimport FilterButton from \"./FilterButton\"\r\n\r\nexport default function SectionBar(props) {\r\n    const classes = `bar ${props.className}`\r\n    return (\r\n        <div class={classes}>\r\n            <SectionButton isToDo = { props.className === \"todo-bar\" }/>\r\n            <h1 class=\"bar-title\"> {props.sectionTitle} </h1>\r\n            <FilterButton/>\r\n        </div>  \r\n    )\r\n}","import { connect } from \"react-redux\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport TaskList from \"../Tasks/TaskList.js\"\r\nimport SectionBar from \"./SectionBar.js\"\r\n\r\n/*\r\n@props: {\r\n    className: \"todo-bar| completed-bar\";\r\n    sectionTitle: string;\r\n    tasks: TaskItem[]\r\n    showContainer: boolean\r\n}\r\n*/\r\n\r\nfunction SectionContainer(props) {\r\n    return (\r\n        <div>\r\n            <SectionBar sectionTitle = {props.sectionTitle} className={props.className}/>\r\n            { props.showContainer && <TaskList tasks={props.tasks} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state,ownProps) {\r\n    const isToDo = ownProps.sectionTitle === \"To Do\"\r\n\r\n    if (isToDo) return { \r\n        tasks: TaskDataController.todo(),\r\n        showContainer: AppDataController.showToDo()\r\n    }\r\n    \r\n    return {\r\n        tasks: TaskDataController.completed(),\r\n        showContainer: AppDataController.showCompleted()\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SectionContainer)","\r\n\r\n\r\n/* \r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function \r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function ActionMenuItem(props) {\r\n\r\n    return (\r\n        <button onClick={() => props.command()} class=\"action-item\">\r\n            { props.icon && <FontAwesomeIcon icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import ActionMenuItem from \"./ActionMenuItem.js\"\r\nimport \"../../css/action_list.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\n/*\r\nprops: {\r\n    menuItems: MenuItem[]\r\n}\r\n\r\nmenuItem {\r\n    text: string;\r\n\r\n    command: Function\r\n}\r\n*/\r\n\r\n\r\nfunction deleteAll() {\r\n    TaskDataController.deleteAllCompleted()\r\n    AppDataController.showUndo()\r\n    setTimeout( () => {\r\n        AppDataController.hideUndo()\r\n    },3000)\r\n    \r\n}\r\nconst menuItems = [\r\n    {text:\"Add Task\", command: TaskDataController.createTask, icon: faPlus},\r\n    {text: \"Clear Completed Tasks\", command:deleteAll, icon: faMinus},\r\n]\r\n\r\nexport default function ActionMenu(props) {\r\n    return (\r\n        <div class='overlay'onClick= {AppDataController.closeMenu}>\r\n            <div class='action-container'>\r\n                { menuItems.map(menuItem => {\r\n                    return <ActionMenuItem {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n     \r\n    )\r\n}","import \"../../css/action_button.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\"\r\n\r\nfunction undoTask() {\r\n    AppDataController.undoTask()\r\n    AppDataController.hideUndo()\r\n}\r\n\r\nexport default function UndoButton() {\r\n    return (\r\n        <div class=\"undo\">\r\n            <p> Completed tasks cleared</p>\r\n            <button alt=\"undo task clear\" onClick={undoTask}> Undo </button>\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n","import db from \"../db/index\"\r\nimport {COLLECTION_NAME,DEFAULT_DOC_ID} from \"./constants\"\r\nconst collectionRef = db.collection(COLLECTION_NAME)\r\n\r\nexport default class TaskOrderController {\r\n\r\n    static async addSortField(field,isAscending) {\r\n        const sortFilters = await getSortFields()\r\n        if (!sortFilters) return\r\n        if (isAlreadyEnabled(field,sortFilters)) return\r\n        else enableFilter(sortFilters,field,isAscending)\r\n    }\r\n\r\n    static async changeSortField(old,newField) {\r\n        const sortFilters = await getSortFields()\r\n        const prevField = sortFilters.find(f => f.field == old)\r\n        if (!prevField) return\r\n        prevField.field = newField\r\n        await updateSortFields(sortFilters)\r\n    }\r\n\r\n    static async changeAscending(field,isAscending) {\r\n        console.log(field,isAscending)\r\n        const sortFilters = await getSortFields()\r\n        const prevField = sortFilters.find(f => f.field == field)\r\n        if (!prevField) return\r\n        prevField.isAscending = isAscending\r\n        await updateSortFields(sortFilters)\r\n\r\n\r\n    }\r\n\r\n    static async addRandomField() {\r\n        const sortFilters = await getSortFields()\r\n        if (!sortFilters) return\r\n\r\n        const hasName = !!sortFilters.find(f => f.field == \"name\")\r\n        const hasTime = !!sortFilters.find(f => f.field == \"time\")\r\n        const hasPriority = !!sortFilters.find(f => f.field == \"priority\")\r\n\r\n        console.log(sortFilters)\r\n\r\n        if (!hasName) await TaskOrderController.addSortField(\"name\",true)\r\n        else if (!hasTime) await TaskOrderController.addSortField(\"time\",true)\r\n        else if (!hasPriority) await TaskOrderController.addSortField(\"priority\",true)\r\n\r\n\r\n    }\r\n\r\n    static async removeSortField(field) {\r\n        const sortFields = await getSortFields()\r\n        const doc = getDoc()\r\n        if (!sortFields) return\r\n        const newSortingFields = sortFields.filter(f => f.field !== field)\r\n        await updateSortFields(newSortingFields)\r\n    }\r\n\r\n    static async changeSortFieldOrder(field,newIndex) {\r\n        const sortFields = await getSortFields()\r\n        if (!sortFields || newIndex < 0 || newIndex >= sortFields.length) return\r\n\r\n        const currentIndex = getCurrentIndexOfField(field,sortFields)\r\n        if (currentIndex == -1 ) return\r\n\r\n        const entry = sortFields.splice(currentIndex,1)\r\n        sortFields.splice(newIndex,0,entry[0])\r\n\r\n        await updateSortFields(sortFields)\r\n    }\r\n\r\n}\r\n\r\nfunction getDoc() {\r\n    return collectionRef.doc(DEFAULT_DOC_ID)\r\n}\r\n\r\nasync function getSortFields() {\r\n    const data = await getDoc().get()\r\n    return data ? data.data().sortingFields : null\r\n}\r\n\r\nasync function updateSortFields(sortingFields) {\r\n    const doc = getDoc()\r\n    await doc.update({sortingFields})\r\n}\r\n\r\nfunction getCurrentIndexOfField(field,sortFields) {\r\n        for (let i = 0 ; i < sortFields.length ;i++) {\r\n            const data = sortFields[i]\r\n            if (data.field == field) return i\r\n        }\r\n        return -1\r\n}\r\n\r\nfunction isAlreadyEnabled(field,sortFilters) {\r\n    return !!sortFilters.find(filter => filter.field == field)\r\n}\r\n\r\nasync function enableFilter(sortingFields,field,isAscending) {\r\n    const doc = getDoc()\r\n    sortingFields.push({field,isAscending})\r\n    await updateSortFields(sortingFields)\r\n}\r\n\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus} from \"@fortawesome/free-solid-svg-icons\"\r\nimport TaskOrderController from \"../../modules/dataController/TaskOrderController\";\r\n\r\nasync function addFilterSection() {\r\n  await TaskOrderController.addRandomField()\r\n}\r\n\r\nexport default function AddFilterButton(props) {\r\n    return (\r\n        <button onClick={addFilterSection} className=\"sortButton\">\r\n            <h3>  + Filter </h3>\r\n        </button>\r\n    )\r\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faWindowClose} from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\nfunction closeMenu() {\r\n    AppDataController.hideSortMenu()\r\n}\r\nexport default function CloseMenuButton(props) {\r\n    return (\r\n        <button className=\"sort-button\"  onClick={closeMenu}>\r\n            <h3> x </h3>\r\n        </button>\r\n    )\r\n\r\n}","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\nimport {connect} from \"react-redux\"\r\n\r\nfunction EntryOrderButton(props) {\r\n\r\n    return (\r\n        <div>\r\n            <label> Order </label>\r\n            <select\r\n                onChange={ (result) => onOrderChange(props.field,parseInt(result.currentTarget.value))}\r\n                value={props.index}\r\n            >\r\n                {\r\n                    props.sortingFields.map((_,i) => {\r\n                        return <option key={i} value={i}> {i + 1} </option>\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nasync function onOrderChange(field,newOrder) {\r\n    console.log(newOrder)\r\n    await TaskOrderController.changeSortFieldOrder(field,newOrder)\r\n}\r\n\r\nfunction mapState(state) {\r\n    return {\r\n        sortingFields:state.sortingFields\r\n    }\r\n}\r\n\r\nexport default connect(mapState)(EntryOrderButton)\r\n\r\n","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\n\r\n\r\nfunction change(old,event) {\r\n    TaskOrderController.changeSortField(old,event.currentTarget.value)\r\n}\r\n\r\nexport default function SortCriteriaDropDown(props) {\r\n\r\n    return(\r\n        <div >\r\n            <label> By </label>\r\n            <select onChange={(event) => change(props.field,event)} value={props.field}>\r\n                <option value='name' > Name </option>\r\n                <option value=\"time\"> Creation Date</option>\r\n                <option value=\"priority\"> Priority </option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\n\r\nasync function change(field,value) {\r\n    await TaskOrderController.changeAscending(field,!value)\r\n}\r\n\r\nexport default function IsAscendingButton(props) {\r\n\r\n    return (\r\n        <div>\r\n            <label> isAscending </label>\r\n            <input\r\n                type='checkbox'\r\n                value={props.isAscending}\r\n                checked= {props.isAscending}\r\n                onChange= {() => change(props.field,props.isAscending)}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\n\r\n\r\nfunction deleteSort(fieldName) {\r\n    TaskOrderController.removeSortField(fieldName)\r\n}\r\n\r\nexport default function DeleteButton(props) {\r\n\r\n    return (\r\n        <button onClick={() => deleteSort(props.field)} >\r\n            <span> X </span>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import EntryOrderButton from \"./EntryOrderButton\";\r\nimport SortCriteriaDropDown from \"./SortCriteriaDropDown\";\r\nimport IsAscendingButton from \"./isAscendingButton\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport \"../../../css/sort_entry.css\"\r\n\r\n/*\r\n@props() {\r\nfield\r\nisAscending\r\nindex\r\n\r\n}\r\n */\r\n\r\nexport default function SortEntryContainer(props) {\r\n    return (\r\n        <div className=\"entry-container\">\r\n            <EntryOrderButton\r\n                field={props.field}\r\n                index={props.index}\r\n            />\r\n            <SortCriteriaDropDown\r\n                field={props.field}\r\n            />\r\n            <IsAscendingButton\r\n                isAscending={props.isAscending}\r\n                field={props.field}\r\n            />\r\n            <DeleteButton field={props.field}/>\r\n        </div>\r\n    )\r\n}","import \"../../css/sort_container.css\"\r\nimport AddFilterButton from \"./addFilterButton\"\r\nimport CloseMenuButton from \"./CloseMenuButton\"\r\nimport {connect} from \"react-redux\"\r\nimport SortEntryContainer from \"./SortEntry/SortEntryContainer\"\r\n\r\n\r\nfunction SortMenuContainer(props) {\r\n\r\n    return (\r\n        <div className=\"sort-container\">\r\n            <div className=\"sort-bar\">\r\n                <h2> Filter</h2>\r\n                <div className='sort-section'>\r\n                    <AddFilterButton/>\r\n                    <CloseMenuButton/>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            <div class='field-container'>\r\n                {\r\n                    props.sortingFields.map((data,index) => {\r\n                        return <SortEntryContainer key={index} index={index} {...data} />\r\n                    })\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction mapToState(state) {\r\n    return {\r\n        sortingFields: state.sortingFields\r\n    }\r\n}\r\n\r\nexport default connect(mapToState)(SortMenuContainer)","import \"./css/global.css\"\r\nimport \"typeface-roboto\"\r\nimport ActionButton from \"./components/Action Commands/ActionButton\";\r\nimport AppDataController from \"./modules/dataController/AppDataController\";\r\nimport Header from './components/Header';\r\nimport SectionContainer from \"./components/Section/SectionContainer.js\"\r\nimport ActionMenu from \"./components/Action Commands/ActionMenu\";\r\nimport { connect } from \"react-redux\";\r\nimport UndoButton from \"./components/Undo/UndoButton\";\r\nimport SortMenuContainer from \"./components/SortMenu/SortMenuContainer\";\r\n\r\nfunction App({menuIsActive,showUndo,showSortMenu}) {\r\n  return (\r\n    <div class='container'>\r\n      <Header/>\r\n      <SectionContainer \r\n        className='todo-bar' \r\n        sectionTitle=\"To Do\"\r\n      />\r\n      <SectionContainer \r\n        className='completed-bar' \r\n        sectionTitle=\"Completed\"\r\n      />\r\n      { menuIsActive && <ActionMenu/> }\r\n      <ActionButton/>\r\n      { showUndo && <UndoButton/> }\r\n    {showSortMenu && <SortMenuContainer/>}\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapToState(state) {\r\n  return {\r\n    menuIsActive: AppDataController.menuIsActive(),\r\n    showUndo: AppDataController.undoIsActive(),\r\n      showSortMenu: AppDataController.showSortMenu()\r\n  }\r\n}\r\nexport default connect(mapToState)(App)","import db from \"../db/index\"\r\nimport {updateSortingFieldsAction, updateTasksAction} from \"./actions\"\r\nimport store from \"./store\"\r\n\r\nclass DataSyncController {\r\n    _db = db\r\n    _taskSubscription = null\r\n    _sortSubscrption = null\r\n\r\n    setTaskSubscription(query) {\r\n        this._taskSubscription = query.onSnapshot( snapshot => {\r\n            const tasks = snapshot.docs.map(task => task.data())\r\n            const action = updateTasksAction(tasks)\r\n            store.dispatch(action)\r\n        })\r\n    }\r\n\r\n    setSortSubscription(query) {\r\n        this._sortSubscrption = query.onSnapshot(snapshot => {\r\n            const {sortingFields} = snapshot.data()\r\n            console.log(sortingFields)\r\n            const action = updateSortingFieldsAction(sortingFields)\r\n            store.dispatch(action)\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport default new DataSyncController()","import DataSyncController from \"../dataController/DataSyncController\"\r\nimport {COLLECTION_NAME, DEFAULT_DOC_ID} from \"../dataController/constants\"\r\nimport db from \"../db/index\"\r\n\r\nconst collectionRef = db.collection(COLLECTION_NAME)\r\nconst tasks = collectionRef.doc(DEFAULT_DOC_ID).collection(\"tasks\")\r\nconst sortFilters = collectionRef.doc(DEFAULT_DOC_ID)\r\n\r\nexport default function () {\r\n    DataSyncController.setTaskSubscription(tasks)\r\n    DataSyncController.setSortSubscription(sortFilters)\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from \"react-redux\"\r\nimport store from \"./modules/dataController/store.js\"\r\nimport initSubscription from \"./modules/setup/initSubscriptions\"\r\nimport TaskDataController from \"./modules/dataController/TaskDataController\";\r\n\r\n\r\n\r\ninitSubscription()\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n"],"sourceRoot":""}