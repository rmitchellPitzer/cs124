{"version":3,"sources":["modules/dataController/actions.js","modules/sorting/sortingAlgorithm.js","modules/dataController/reducer.js","modules/dataController/store.js","modules/dataController/AppDataController.js","modules/db/index.js","modules/db/firebaseConfig.js","modules/dataController/constants.js","modules/dataController/TaskDataController.js","components/Action Commands/ActionButton.js","components/Header/DropDownButton.js","components/Header/Header.js","components/Priority/PriorityIcon.js","components/Priority/PriorityButton/PriorityButton.js","modules/focusRecentTaskOrLast.js","components/Tasks/Task.js","components/Tasks/TaskList.js","components/Section/SectionButton.js","components/Section/FilterButton.js","components/Action Commands/ActionMenuItem.js","components/Action Commands/ActionMenu.js","components/Section/SectionBar.js","components/Section/SectionContainer.js","components/Undo/UndoButton.js","modules/dataController/TaskOrderController.js","components/SortMenu/addFilterButton.js","components/SortMenu/CloseMenuButton.js","components/SortMenu/SortEntry/EntryOrderButton.js","components/SortMenu/SortEntry/SortCriteriaDropDown.js","components/SortMenu/SortEntry/isAscendingButton.js","components/SortMenu/SortEntry/DeleteButton.js","components/SortMenu/SortEntry/SortEntryContainer.js","components/SortMenu/SortMenuContainer.js","components/Priority/PriorityMenu/PriorityItem.js","components/Priority/PriorityMenu/PriorityCloseButton.js","components/Priority/PriorityMenu/PriorityMenuBar.js","components/Priority/PriorityMenu/PriorityMenuContainer.js","components/TaskMenu/TaskMenuBar/TaskMenuCloseButton.js","components/TaskMenu/TaskMenuBar/TaskMenuDeleteButton.js","components/TaskMenu/TaskMenuBar/TaskMenuBar.js","components/TaskMenu/TaskEditor.js","components/TaskMenu/TaskMenu.js","App.js","modules/dataController/DataSyncController.js","modules/setup/initSubscriptions.js","modules/setup/init.js","index.js"],"names":["TOGGLE_TASK_COMPLETION","PUSH_TASKS_TO_STACK","TOGGLE_TODO_LIST","TOGGLE_COMPLETED_LIST","SHOW_MENU","HIDE_MENU","UNDO_TASK","SHOW_UNDO","HIDE_UNDO","UPDATE_TASKS","UPDATE_SORTING_FIELDS","SHOW_SORT_FIELD_MENU","HIDE_SORT_FIELD_MENU","SHOW_PRIORITY_MENU","HIDE_PRIORITY_MENU","SHOW_TASK_MENU","HIDE_TASK_MENU","SET_ACTIVE_TASK","POP_STACK","NAME","TIME","PRIORITY","applySorting","sortDataList","tasks","i","length","sortData","sortFunction","getSortFunction","sortTasks","prevSortData","sortBySecondaryKey","map","x","sort","a","b","isAscending","prevSortFunction","valuesAreEqual","field","sortByName","sortByTime","sortByPriority","taskA","taskB","comparison","text","localeCompare","priority","creationDate","initialState","stack","sortingFields","showUndo","showCompleted","showTodo","showMenu","showTaskMenu","showSortMenu","showPriorityMenu","priorityMenuActiveID","activeTask","toggleTaskCompletion","state","id","newTasks","task","find","isCompleted","pushTasksToStack","push","undoTask","pop","toggleCompletedList","toggleToDoList","hideMenu","hideUndo","updateTasks","oldTasks","sortingAlgorithm","updateSortingFields","hideSortFieldMenu","showSortFieldMenu","payload","hidePriorityMenu","hideTaskMenu","setActiveTask","popStack","store","createStore","action","type","AppDataController","dispatch","getState","showPriorityMenuAction","setActiveTaskAction","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","COLLECTION_NAME","DEFAULT_DOC_ID","TASK_SUBCOLLECTION","collectionRef","db","collection","getTask","doc","updateTask","set","TaskDataController","update","get","data","uuidv4","Date","now","delete","where","docs","s","ref","filter","restoredState","exists","handleOnClick","taskID","createTask","ActionButton","class","onClick","autoFocus","icon","faPlus","DropDownButton","classNames","hasCompletedTasks","className","faEllipsisV","Header","props","classes","PriorityIcon","classList","priorityText","p","PriorityButton","element","document","getElementsByClassName","focus","openPriorityMenu","focusRecentTaskOrLast","lastTask","getLastTask","lastTaskID","getElementById","findAppropriateTask","actionButton","focusActionButton","event","key","sibling","getSibling","deleteTask","previousElementSibling","ariaLabel","priorityLevels","Map","connect","ownProps","isSelected","menuIsOpen","onKeyDown","e","shouldDeleteTaskEvent","alt","value","onChange","handleCheckBoxEvent","checked","console","log","TaskList","arialLabel","isToDo","isOpen","showToDo","faAngleDown","faAngleRight","toggleTodoList","toggleButton","openSortFieldMenu","FilterButton","faSort","ActionMenuItem","command","closeMenu","menuItems","deleteAllCompleted","setTimeout","faMinus","ActionMenu","menuItem","SectionBar","hasCompletedTask","sectionTitle","menuIsActive","todo","showContainer","completed","undoTaskDelete","UndoButton","TaskOrderController","hasValidField","getSortFields","sortFilters","isAlreadyEnabled","enableFilter","old","newField","prevField","f","hasFieldAlready","updateSortFields","hasName","hasTime","hasPriority","addSortField","sortFields","getDoc","newSortingFields","newIndex","currentIndex","getCurrentIndexOfField","entry","splice","addFilterSection","addRandomField","AddFilterButton","hideSortMenu","sortCloseButton","CloseMenuButton","newOrder","changeSortFieldOrder","result","onOrderChange","parseInt","currentTarget","index","_","SortCriteriaDropDown","changeSortField","change","changeAscending","IsAscendingButton","faSortAmountUp","faSortAmountDown","DeleteButton","fieldName","removeSortField","SortEntryContainer","selection","isSelection","tabIndex","updateTaskPriority","closePriorityMenu","PriorityCloseButton","PriorityMenuBar","priorityData","PriorityMenuContainer","TaskMenuCloseButton","TaskMenuBar","updateTaskText","isEnter","inputForm","newID","onKeyPress","shouldCreateNewTask","updateActiveTask","TaskMenu","undoIsActive","DataSyncController","_db","_taskSubscription","_sortSubscription","query","this","onSnapshot","snapshot","updateTasksAction","_sortSubscrption","updateSortingFieldsAction","setTaskSubscription","setSortSubscription","initSubscriptions","init","ReactDOM","render"],"mappings":"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","file":"static/js/main.98625029.chunk.js","sourcesContent":["export const CREATE_TASK = \"createTask\"\r\nexport const DELETE_TASK = \"deleteTask\"\r\nexport const UPDATE_TASK_TEXT = \"updateTaskText\"\r\nexport const TOGGLE_TASK_COMPLETION = \"toggleTaskCompletion\"\r\nexport const PUSH_TASKS_TO_STACK = \"pushTasksToStack\"\r\nexport const TOGGLE_TODO_LIST = \"toggleTodoList\"\r\nexport const TOGGLE_COMPLETED_LIST = \"toggleCompletedList\"\r\nexport const SHOW_MENU = \"showMenu\"\r\nexport const HIDE_MENU = \"hideMenu\"\r\nexport const UNDO_TASK = \"undoTask\"\r\nexport const SHOW_UNDO = \"showUndo\"\r\nexport const HIDE_UNDO = \"hideUndo\"\r\nexport const UPDATE_TASKS = \"updateTasks\"\r\nexport const UPDATE_SORTING_FIELDS = \"updateSortingFields\"\r\nexport const SHOW_SORT_FIELD_MENU = \"showSortFieldMenu\"\r\nexport const HIDE_SORT_FIELD_MENU = \"hideSortFieldMenu\"\r\nexport const SHOW_PRIORITY_MENU = \"showPriorityMenu\"\r\nexport const HIDE_PRIORITY_MENU = \"hidePriorityMenu\"\r\nexport const SHOW_TASK_MENU = \"showTaskMenu\"\r\nexport const HIDE_TASK_MENU = \"hideTaskMenu\"\r\nexport const SET_ACTIVE_TASK = \"setActiveTask\"\r\nexport const POP_STACK = \"popStack\"\r\n\r\nexport const showUndoAction = () => ({type:SHOW_UNDO})\r\nexport const hideUndoAction = () => ({type:HIDE_UNDO})\r\nexport const undoTaskAction = () => ({type:UNDO_TASK})\r\nexport const showMenuAction = () => ({type:SHOW_MENU})\r\nexport const hideMenuAction = () => ({type:HIDE_MENU})\r\nexport const createTaskAction = () => ({type:CREATE_TASK})\r\nexport const deleteTaskAction = (id) => ({type:DELETE_TASK, payload:{id}})\r\nexport const updateTaskTextAction = (id,text) => ({type: UPDATE_TASK_TEXT,payload: {id,text}})\r\nexport const toggleTaskCompletionAction = (id) => ({type: TOGGLE_TASK_COMPLETION,payload:{id}})\r\nexport const pushTasksToStackAction = () => ({type: PUSH_TASKS_TO_STACK})\r\nexport const toggleCompletedListAction = () => ({type:TOGGLE_COMPLETED_LIST})\r\nexport const toggleToDoListAction = () => ({type:TOGGLE_TODO_LIST})\r\nexport const updateTasksAction = (tasks) => ({type:UPDATE_TASKS,payload:{tasks}})\r\nexport const updateSortingFieldsAction = (sortingFields) => ({type:UPDATE_SORTING_FIELDS, payload: {sortingFields}})\r\nexport const showSortFieldAction = () => ({type:SHOW_SORT_FIELD_MENU})\r\nexport const hideSortFieldAction = () => ({type:HIDE_SORT_FIELD_MENU})\r\nexport const showPriorityMenuAction = (id) => ({type:SHOW_PRIORITY_MENU, payload: {id}})\r\nexport const hidePriorityMenuAction = () => ({type:HIDE_PRIORITY_MENU})\r\nexport const showTaskMenuAction = () => ({type:SHOW_TASK_MENU})\r\nexport const hideTaskMenuAction = () => ({type: HIDE_TASK_MENU})\r\nexport const setActiveTaskAction = (id) => ({type:SET_ACTIVE_TASK,payload:{id}})\r\nexport const popStackAction = () => ({type: POP_STACK})","/*\r\n\r\n@ISortData: {\r\nfield:\"name\"|\"time\"|\"priority\",\r\nisAscending:Boolean\r\n}\r\n\r\n@ITask: {\r\n    _id:String (UUIDV4);\r\n    isCompleted:Boolean;\r\n    text:String;\r\n    creationDate:Number (Unix);\r\n    priority: Number;\r\n}\r\n */\r\n\r\nexport const NAME = \"name\"\r\nexport const TIME = \"time\"\r\nexport const PRIORITY = \"priority\"\r\n\r\nexport default function applySorting(sortDataList,tasks) {\r\n    for (let i = 0; i < sortDataList.length; i++) {\r\n        const sortData = sortDataList[i]\r\n        const sortFunction = getSortFunction(sortData)\r\n        if (isFirstSortField(i)) {\r\n           sortTasks(tasks,sortFunction,sortData)\r\n        }\r\n        else {\r\n            const prevSortData = sortDataList[i - 1]\r\n            const prevSortFunction = getSortFunction(prevSortData)\r\n            sortBySecondaryKey(prevSortData,prevSortFunction,sortData,tasks,sortFunction)\r\n        }\r\n\r\n    }\r\n    return tasks.map(x => x)\r\n}\r\n\r\nfunction isFirstSortField(index) {\r\n    return index == 0\r\n}\r\n\r\nfunction sortTasks(tasks,sortFunction,sortData) {\r\n    tasks.sort((a, b) => sortFunction(a, b, sortData.isAscending))\r\n}\r\n\r\nfunction sortBySecondaryKey(prevSortData,prevSortFunction,sortData,tasks,sortFunction) {\r\n    tasks.sort((a,b) => {\r\n        if (valuesAreEqual(prevSortData,prevSortFunction,a,b)) {\r\n            return sortFunction(a,b,sortData.isAscending)\r\n        }\r\n    })\r\n}\r\n\r\nfunction valuesAreEqual(sortData,sortFunction,a,b) {\r\n    return sortFunction(a,b,sortData.isAscending) == 0\r\n}\r\n\r\nfunction getSortFunction({field,isAscending}) {\r\n    switch (field) {\r\n        case NAME : return sortByName;\r\n        case TIME: return sortByTime;\r\n        case PRIORITY: return sortByPriority;\r\n        default: return\r\n    }\r\n}\r\n\r\nfunction sortByName(taskA,taskB,isAscending) {\r\n    const comparison = taskA.text.localeCompare(taskB.text)\r\n    return isAscending ? comparison : -1 * comparison\r\n}\r\n\r\nfunction sortByPriority(taskA,taskB,isAscending) {\r\n    if (taskA.priority == -1) return 1\r\n    if (taskB.priority == -1) return -1\r\n\r\n    const comparison = taskA.priority - taskB.priority\r\n    return isAscending ? -1 * comparison : comparison\r\n}\r\n\r\nfunction sortByTime(taskA,taskB,isAscending) {\r\n    const comparison = taskA.creationDate - taskB.creationDate\r\n    return isAscending ? comparison : -1 * comparison\r\n}","/* eslint-disable no-lone-blocks */\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    HIDE_MENU,\r\n    HIDE_UNDO,\r\n    SHOW_MENU,\r\n    SHOW_UNDO,\r\n    TOGGLE_COMPLETED_LIST,\r\n    TOGGLE_TASK_COMPLETION,\r\n    TOGGLE_TODO_LIST,\r\n    UNDO_TASK,\r\n    UPDATE_TASKS,\r\n    UPDATE_SORTING_FIELDS,\r\n    SHOW_SORT_FIELD_MENU,\r\n    HIDE_SORT_FIELD_MENU,\r\n    SHOW_PRIORITY_MENU,\r\n    HIDE_PRIORITY_MENU,\r\n    SHOW_TASK_MENU,\r\n    HIDE_TASK_MENU,\r\n    SET_ACTIVE_TASK,\r\n    PUSH_TASKS_TO_STACK, POP_STACK\r\n} from './actions';\r\n\r\nimport sortingAlgorithm from \"../sorting/sortingAlgorithm\"\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    stack:[],\r\n    sortingFields:[],\r\n    showUndo: false,\r\n    showCompleted: false,\r\n    showTodo: true,\r\n    showMenu: false,\r\n    showTaskMenu:false,\r\n    showSortMenu: false,\r\n    showPriorityMenu: false ,\r\n    priorityMenuActiveID: null,\r\n    activeTask: null\r\n}\r\n\r\nfunction createTask(state) {\r\n    const id = uuidv4()\r\n    const task = {\r\n        text:\"\",\r\n        isCompleted:false,\r\n        id,\r\n        priority: -1,\r\n        creationDate: Date.now()\r\n    }\r\n    const newState = state.tasks.map(x => x)\r\n    newState.push(task)\r\n    const tasks = sortingAlgorithm(state.sortingFields,newState)\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\nfunction deleteTask(state,id) {\r\n    const tasks = state.tasks.filter(task => task.id !== id)\r\n    return {\r\n        ...state,\r\n        tasks \r\n    }\r\n}\r\n\r\nfunction updateTaskText(state,{id,text}) {\r\n    const newTasks = state.tasks.map(x => x)\r\n    const task = newTasks.find(task => task.id === id)\r\n    if (!task) return state\r\n    task.text = text\r\n\r\n    const tasks = sortingAlgorithm(state.sortingFields,newTasks)\r\n\r\n\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\nfunction toggleTaskCompletion(state,id) {\r\n    const newTasks = state.tasks.map(x => x)\r\n    const task = newTasks.find(task => task.id === id)\r\n    task.isCompleted = !task.isCompleted\r\n\r\n    return {\r\n        ...state,\r\n        tasks:newTasks \r\n    }\r\n\r\n}\r\n\r\nfunction pushTasksToStack(state) {\r\n    const stack = [...state.stack]\r\n    stack.push(state.tasks)\r\n\r\n   return {\r\n       ...state,\r\n       stack,\r\n   }\r\n}\r\n\r\nfunction undoTask(state) {\r\n    const stack = state.stack.map(x => x)\r\n\r\n    return {\r\n        ...state,\r\n        tasks: stack.pop(),\r\n        stack \r\n    }\r\n}\r\n\r\nfunction toggleCompletedList(state) {\r\n    return {\r\n        ...state,\r\n        showCompleted: !state.showCompleted\r\n    }\r\n}\r\n\r\nfunction toggleToDoList(state) {\r\n    return {\r\n        ...state,\r\n        showTodo: !state.showTodo \r\n    }\r\n}\r\n\r\nfunction showMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu: true \r\n        }\r\n}\r\n\r\nfunction hideMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu:false \r\n    }\r\n}\r\n\r\nfunction showUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: true\r\n    }\r\n}\r\n\r\nfunction hideUndo(state) {\r\n    return {\r\n        ...state,\r\n        showUndo: false \r\n    }\r\n}\r\n\r\nfunction updateTasks(state,oldTasks) {\r\n    const tasks = sortingAlgorithm(state.sortingFields,oldTasks)\r\n    return {\r\n        ...state,\r\n        tasks\r\n    }\r\n}\r\n\r\nfunction updateSortingFields(state,{sortingFields}) {\r\n    const tasks = sortingAlgorithm(sortingFields,state.tasks)\r\n    return {\r\n        ...state,\r\n        tasks,\r\n        sortingFields\r\n    }\r\n}\r\n\r\nfunction openSortFieldMenu(state) {\r\n    return {\r\n        ...state,\r\n        showSortMenu: true,\r\n        showPriorityMenu:false,\r\n        showTaskMenu: false,\r\n\r\n    }\r\n}\r\n\r\nfunction hideSortFieldMenu(state) {\r\n    return {\r\n        ...state,\r\n        showSortMenu: false\r\n    }\r\n}\r\n\r\nfunction showSortFieldMenu(state) {\r\n    return {\r\n        ...state,\r\n        showSortMenu: true,\r\n        showPriorityMenu: false,\r\n        showTaskMenu: false,\r\n    }\r\n}\r\n\r\nfunction showPriorityMenu(state,payload) {\r\n    return {\r\n        ...state,\r\n       priorityMenuActiveID: payload.id,\r\n       showPriorityMenu:true,\r\n       showSortMenu: false,\r\n       showTaskMenu: false,\r\n    }\r\n}\r\n\r\nfunction hidePriorityMenu(state) {\r\n        return {\r\n            ...state,\r\n            showPriorityMenu:false,\r\n        }\r\n}\r\n\r\nfunction showTaskMenu(state) {\r\n    return {\r\n        ...state,\r\n        showMenu: false,\r\n        showPriorityMenu: false,\r\n        showTaskMenu: true\r\n    }\r\n}\r\n\r\nfunction hideTaskMenu(state) {\r\n    return {\r\n        ...state,\r\n        showTaskMenu: false\r\n    }\r\n}\r\n\r\nfunction setActiveTask(state,activeTask) {\r\n    return {\r\n        ...state,\r\n        activeTask\r\n    }\r\n}\r\n\r\nfunction popStack(state) {\r\n    const stack = [...state.stack]\r\n    stack.pop()\r\n\r\n    return {\r\n        ...state,\r\n        stack\r\n    }\r\n}\r\n\r\nexport default function toDoReducer(state = initialState, action){\r\n    switch (action.type){\r\n        case TOGGLE_TASK_COMPLETION: return toggleTaskCompletion(state,action.payload.id)\r\n        case TOGGLE_TODO_LIST: return toggleToDoList(state)\r\n        case TOGGLE_COMPLETED_LIST: return toggleCompletedList(state)\r\n        case SHOW_MENU: return showMenu(state)\r\n        case HIDE_MENU: return hideMenu(state)\r\n        case UNDO_TASK: return undoTask(state)\r\n        case SHOW_UNDO: return showUndo(state)\r\n        case HIDE_UNDO: return hideUndo(state)\r\n        case UPDATE_TASKS: return updateTasks(state,action.payload.tasks)\r\n        case UPDATE_SORTING_FIELDS: return updateSortingFields(state,action.payload)\r\n        case SHOW_SORT_FIELD_MENU: return showSortFieldMenu(state)\r\n        case HIDE_SORT_FIELD_MENU: return hideSortFieldMenu(state)\r\n        case SHOW_PRIORITY_MENU: return showPriorityMenu(state,action.payload)\r\n        case HIDE_PRIORITY_MENU: return hidePriorityMenu(state)\r\n        case SHOW_TASK_MENU: return showTaskMenu(state)\r\n        case HIDE_TASK_MENU: return hideTaskMenu(state)\r\n        case SET_ACTIVE_TASK: return setActiveTask(state,action.payload.id)\r\n        case PUSH_TASKS_TO_STACK: return pushTasksToStack(state)\r\n        case POP_STACK: return popStack(state)\r\n\r\n        default:\r\n            return state \r\n    }\r\n\r\n\r\n}\r\n","import {createStore} from \"redux\"\r\nimport rootReducer  from \"./reducer\"\r\n\r\nconst store = createStore(rootReducer)\r\nexport default store ","import {\r\n    hideMenuAction, hidePriorityMenuAction, hideSortFieldAction,\r\n    hideUndoAction,\r\n    showMenuAction, showPriorityMenuAction,\r\n    showUndoAction,\r\n    toggleCompletedListAction,\r\n    showSortFieldAction,\r\n    toggleToDoListAction,\r\n    undoTaskAction, showTaskMenuAction, hideTaskMenuAction, setActiveTaskAction\r\n} from \"./actions.js\"\r\nimport store from \"./store.js\"\r\n\r\nexport default class AppDataController {\r\n\r\n    static toggleTodoList() {\r\n        const action = toggleToDoListAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static activeTask() {\r\n        return store.getState().activeTask\r\n    }\r\n\r\n    static showSortMenu() {\r\n        return store.getState().showSortMenu\r\n    }\r\n\r\n    static hideSortMenu() {\r\n        const action = hideSortFieldAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static openSortFieldMenu() {\r\n        const action = showSortFieldAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static showToDo() {\r\n        return store.getState().showTodo \r\n    }\r\n    \r\n    static showCompleted() {\r\n        return store.getState().showCompleted \r\n    }\r\n\r\n    static showMenu() {\r\n        const action = showMenuAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static closeMenu() {\r\n        const action = hideMenuAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static menuIsActive() {\r\n        return store.getState().showMenu \r\n    }\r\n\r\n    static toggleCompletedList() {\r\n        const action = toggleCompletedListAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static showUndo() {\r\n        const action = showUndoAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static hideUndo() {\r\n        const action = hideUndoAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static undoTask() {\r\n        const action = undoTaskAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static undoIsActive() {\r\n        return store.getState().showUndo \r\n    }\r\n\r\n    static showPriorityMenu(id) {\r\n        const action = showPriorityMenuAction(id)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static hidePriorityMenu() {\r\n        const action = hidePriorityMenuAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static showTaskMenu() {\r\n        const action = showTaskMenuAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static hideTaskMenu() {\r\n        const action = hideTaskMenuAction()\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static setActiveTask(id) {\r\n        const action = setActiveTaskAction(id)\r\n        store.dispatch(action)\r\n    }\r\n\r\n    static getLastTask() {\r\n       const {tasks} = store.getState()\r\n        const {length} = tasks\r\n        if (length == 0) return null\r\n        return tasks[length - 1]\r\n    }\r\n\r\n}","import firebaseConfig from \"./firebaseConfig\"\r\nimport firebase from \"firebase/compat\";\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\nexport default firebase.firestore()","export default  {\r\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\r\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\r\n    projectId: \"hmc-cs124-fa21-labs\",\r\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\r\n    messagingSenderId: \"949410042946\",\r\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\r\n}","export const COLLECTION_NAME = \"todoiz.io\"\r\nexport const DEFAULT_DOC_ID = \"default\"\r\nexport const TASK_SUBCOLLECTION = \"tasks\"","import store from \"./store.js\"\r\nimport db from \"../db/index\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {COLLECTION_NAME,DEFAULT_DOC_ID,TASK_SUBCOLLECTION} from \"./constants\"\r\nimport {popStackAction, pushTasksToStackAction} from \"./actions\";\r\nconst collectionRef = db.collection(COLLECTION_NAME)\r\n\r\n function getTask(id) {\r\n    return collectionRef.doc(DEFAULT_DOC_ID).collection(TASK_SUBCOLLECTION).doc(id)\r\n}\r\n\r\n\r\nasync function updateTask(task) {\r\n    await collectionRef.doc(DEFAULT_DOC_ID).collection(TASK_SUBCOLLECTION).doc(task.id).set(task)\r\n}\r\n/*\r\nTask {\r\n\r\n    isCompleted: boolean;\r\n    text: string;\r\n    \r\n\r\n}\r\n*/\r\nclass TaskDataController {\r\n\r\n    static async updateTaskText(id,text) {\r\n        // DOC\r\n        const task = await getTask(id)\r\n        await task.update({\r\n                text\r\n            })\r\n    } \r\n\r\n    static async toggleTaskCompletion(id) {\r\n        const doc = getTask(id)\r\n        const task = await doc.get()\r\n        if (!task) return \r\n        const {isCompleted} = task.data()\r\n        await doc.update({\r\n            isCompleted:!isCompleted\r\n        })\r\n    }\r\n\r\n    static createTask() {\r\n        const id = uuidv4()\r\n        collectionRef.doc(DEFAULT_DOC_ID).collection(TASK_SUBCOLLECTION).doc(id).set({\r\n            isCompleted: false,\r\n            text: \"\",\r\n            id,\r\n            priority: -1,\r\n            creationDate: Date.now()\r\n        })\r\n        return id\r\n    }\r\n\r\n    static async deleteTask(id) {\r\n        const task = await getTask(id)\r\n        if (!task) return\r\n        await task.delete() \r\n    }\r\n\r\n    static async deleteAllCompleted() {\r\n        const action = pushTasksToStackAction()\r\n        store.dispatch(action)\r\n\r\n        const tasks = await collectionRef\r\n            .doc(DEFAULT_DOC_ID)\r\n            .collection(TASK_SUBCOLLECTION)\r\n            .where(\"isCompleted\",\"==\",true)\r\n            .get()\r\n\r\n        for (const task of tasks.docs) {\r\n            await task.ref.delete()\r\n        }\r\n    }\r\n\r\n    static todo() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === false)\r\n    }\r\n\r\n    static completed() {\r\n        return store.getState()\r\n        .tasks.filter(task => task.isCompleted === true)\r\n    }\r\n\r\n    static async updateTaskPriority(id,priority) {\r\n        const task = await  getTask(id)\r\n        await task.update({\r\n            priority\r\n        })\r\n    }\r\n\r\n    static getTask(id) {\r\n        return store.getState().tasks.find(task => task.id == id)\r\n    }\r\n\r\n    static async undoTaskDelete() {\r\n        const stack = store.getState().stack\r\n        const restoredState = stack.pop()\r\n        if (!restoredState) return\r\n\r\n        for (const task of restoredState) {\r\n            if (!getTask(task.id).exists) {\r\n                await updateTask(task)\r\n            }\r\n        }\r\n\r\n        const action = popStackAction()\r\n        store.dispatch(action)\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default TaskDataController","import AppDataController from \"../../modules/dataController/AppDataController\"\r\nimport \"../../css/action_button.css\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\n\r\nfunction handleOnClick() {\r\n    const taskID = TaskDataController.createTask()\r\n    AppDataController.setActiveTask(taskID)\r\n    AppDataController.showTaskMenu()\r\n}\r\n\r\nexport default function ActionButton() {\r\n    return (\r\n        <button\r\n            id=\"action-button\"\r\n            aria-label=\"Add new Task\"\r\n            class=\"action-button\"\r\n            onClick={handleOnClick}\r\n            autoFocus\r\n        >\r\n        <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n    )\r\n}\r\n\r\n","import \"../../css/banner.css\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport { faEllipsisV} from \"@fortawesome/free-solid-svg-icons\"\nimport AppDataController from \"../../modules/dataController/AppDataController\";\n\nfunction handleOnClick() {\n    AppDataController.showMenu()\n}\n\nexport default function DropDownButton({hasCompletedTasks}) {\n    const classNames = !hasCompletedTasks ? \"banner-drop-down hidden\" : \"banner-drop-down\"\n    return (\n        <button\n            aria-label=\"Clear Task Drop Down\"\n            className={classNames}\n            onClick={handleOnClick}\n        >\n                <FontAwesomeIcon icon={ faEllipsisV}/>\n        </button>\n    )\n}","import \"../../css/banner.css\"\r\nimport DropDownButton from \"./DropDownButton\"\r\n\r\nexport default function Header(props) {\r\n\r\n    return (\r\n        <div class=\"banner\">\r\n            <h1 class=\"title\"> Todoiz.IO</h1>\r\n\r\n\r\n        </div>\r\n    )\r\n}","\r\nconst classes = {\r\n    0: \"high-priority\",\r\n    1: \"medium-priority\",\r\n    2: \"low-priority\",\r\n}\r\n\r\n\r\nexport default function PriorityIcon({priority}) {\r\n    const classList = priority == -1 ? \"no-priority\" : classes[priority]\r\n    return (\r\n        <div className={classList + \" priority-icon\"}/>\r\n    )\r\n}","import PriorityIcon from \"../PriorityIcon\";\r\nimport AppDataController from \"../../../modules/dataController/AppDataController\";\r\n\r\nconst classList = {\r\n    0: \"high-priority\",\r\n    1: \"medium-priority\",\r\n    2: \"low-priority\",\r\n\r\n}\r\n\r\nfunction openPriorityMenu(id) {\r\n        AppDataController.showPriorityMenu(id)\r\n        const element = document.getElementsByClassName(\"priority-item\")\r\n        if (element[0]) element[0].focus()\r\n\r\n}\r\n\r\nfunction priorityText(priority) {\r\n    const p = classList[priority]\r\n    return p ? p : \"no-priority\"\r\n}\r\n\r\nexport default function PriorityButton({id,priority,text}) {\r\n    const classes = priority == -1 ? \"no-priority\" : classList[priority]\r\n\r\n    return <button\r\n            aria-label={`Priority Button with ${priorityText(priority)} for task with text ${text}`}\r\n            className={classes + \" priority-icon\"}\r\n            onClick={() => openPriorityMenu(id)}\r\n            >\r\n            </button>\r\n}","import AppDataController from \"./dataController/AppDataController\";\n\nfunction findAppropriateTask() {\n    let taskID = AppDataController.activeTask()\n    const lastTask = AppDataController.getLastTask()\n    const lastTaskID = !!lastTask? lastTask.id : null\n\n    if (!taskID) {\n        taskID = lastTaskID\n    }\n\n    if (!taskID) return\n    const task = document.getElementById(taskID)\n    if (!task) return document.getElementById(lastTaskID)\n    return task\n}\n\nfunction focusActionButton() {\n    const actionButton = document.getElementById(\"action-button\")\n    if (!actionButton) return\n    actionButton.focus()\n}\n\nexport default function focusRecentTaskOrLast() {\n    const task = findAppropriateTask()\n    if (!task) return focusActionButton()\n    task.getElementsByClassName(\"task-text\")[0].focus()\n}\n","import \"../../css/task.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\"\r\nimport PriorityButton from \"../Priority/PriorityButton/PriorityButton\";\r\nimport {connect} from \"react-redux\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport focusRecentTaskOrLast from \"../../modules/focusRecentTaskOrLast\";\r\n/*\r\nprops: {\r\n    text:string;\r\n    isCompleted:boolean\r\n    id:string \r\n}\r\n*/\r\n\r\nasync function shouldDeleteTaskEvent(event,id) {\r\n    const isDelete = event.key === \"Delete\"\r\n    if (isDelete)  {\r\n        const sibling = getSibling(id)\r\n        await TaskDataController.deleteTask(id)\r\n        if (sibling) sibling.focus()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction getSibling(id) {\r\n    const task = document.getElementById(id)\r\n    if (!task) return null\r\n    return task.previousElementSibling\r\n}\r\n\r\nfunction openTaskMenu(id) {\r\n    console.log(\"clicked\")\r\n    AppDataController.showTaskMenu()\r\n    AppDataController.setActiveTask(id)\r\n}\r\n\r\nfunction ariaLabel({priority,isCompleted,text}) {\r\n    const priorityLevels = new Map()\r\n        .set(0,\"High Priorty\")\r\n        .set(-1,\"No Priority\")\r\n        .set(1,\"Medium Priority\")\r\n        .set(2,\"Low Priority\")\r\n\r\n    return `Task with text ${text} has priority level ${priorityLevels.get(priority)} and is ${isCompleted ? \"completed\": \"not completed \"}`\r\n}\r\n\r\nfunction Task(props) {\r\n     const classes = `task-item ${props.isCompleted ? 'completed' : ''} ${props.isSelected ? 'selected-task' : ''}`\r\n    return (\r\n        <div\r\n            aria-label={ariaLabel(props)}\r\n            id={props.id}\r\n            class={classes}\r\n            onKeyDown={(e) => shouldDeleteTaskEvent(e,props.id)}\r\n        >\r\n            <input \r\n                alt='task completion status' \r\n                class='checkbox'\r\n                type=\"checkbox\"\r\n                aria-label={props.isCompleted ? `Mark task with text ${props.text} as to do`: `Mark task with text ${props.text} as completed `}\r\n                value={ props.isCompleted}\r\n                onChange= {(e) => handleCheckBoxEvent(props.id)}\r\n                checked= {props.isCompleted}\r\n            />\r\n\r\n            <button\r\n                aria-label={`To do item with text: ${props.text}`}\r\n                class='task-text'\r\n                alt='task text'\r\n                onClick={() => openTaskMenu(props.id)}\r\n            >\r\n                {props.text}\r\n            </button>\r\n            <PriorityButton text={props.text} id={props.id} priority={props.priority}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction handleTextEvent(id,event) {\r\n    const text = event.currentTarget.value\r\n    TaskDataController.updateTaskText(id,text)\r\n}\r\n\r\nasync function handleCheckBoxEvent(id) {\r\n    await TaskDataController.toggleTaskCompletion(id)\r\n    focusRecentTaskOrLast()\r\n}\r\n\r\n\r\nfunction menuIsOpen(state) {\r\n    return state.showTaskMenu || state.showSortMenu || state.showPriorityMenu\r\n}\r\n\r\nfunction mapToState(state,ownProps) {\r\n    const isSelected = ownProps.id == state.activeTask && menuIsOpen(state)\r\n     return {\r\n         isSelected\r\n     }\r\n}\r\n\r\nexport default connect(mapToState)(Task)","import Task from \"./Task\";\r\nimport \"../../css/container.css\"\r\n\r\n\r\n\r\n\r\n/*\r\nprops:{\r\n    tasks: TaskItem[]\r\n\r\n}\r\n*/\r\nexport default function TaskList(props) {\r\n\r\n    return (\r\n        <div class='container scroll-container'>\r\n            {\r\n            props.tasks.map(task => {\r\n            return <Task \r\n                        {...task}\r\n                        key={task.id}\r\n                    />\r\n            })\r\n            }\r\n        </div>   \r\n    )\r\n    \r\n}","import { faAngleDown, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { connect } from \"react-redux\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\"\r\n\r\n\r\nfunction arialLabel({isToDo,isOpen}) {\r\n    if (isToDo) {\r\n        if (isOpen) return \"Close To Do Section\"\r\n        return \"Open To Do Section \"\r\n    }\r\n    else {\r\n        if (isOpen) return \"Close Completed Section\"\r\n        return \"Open Completed Section \"\r\n    }\r\n}\r\nfunction SectionButton(props) {\r\n    const icon = props.isOpen ? faAngleDown : faAngleRight\r\n    return (\r\n        <button\r\n            class=\"drop-down\"\r\n            onClick={(e) => handleOnClick(props.isToDo)}\r\n            aria-label={arialLabel(props)}\r\n        >\r\n            <FontAwesomeIcon icon={icon} />\r\n        </button>\r\n    )\r\n}   \r\n\r\nfunction handleOnClick(isToDo) {\r\n    if (isToDo) {\r\n        AppDataController.toggleTodoList()\r\n    }\r\n    else AppDataController.toggleCompletedList()\r\n}\r\n\r\nfunction mapToState(state,{isToDo}) {\r\n    return {\r\n        isOpen: \r\n            isToDo ? AppDataController.showToDo() \r\n            : AppDataController.showCompleted()\r\n        }\r\n}\r\n\r\nexport default connect(mapToState)(SectionButton)","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSort} from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport \"../../css/sort_button.css\"\r\n\r\nfunction toggleButton() {\r\n   AppDataController.openSortFieldMenu()\r\n}\r\n\r\nexport default function FilterButton(props) {\r\n   const classes = !props.isToDo ? \"sort-button hide\" : \"sort-button\"\r\n   return  (\r\n       <button\r\n           id=\"filter-button\"\r\n           className={classes}\r\n           onClick={toggleButton}\r\n           aria-label=\"Open Sort Filter\"\r\n\r\n       >\r\n            <FontAwesomeIcon icon={faSort}/>\r\n       </button>\r\n      )\r\n}\r\n\r\n\r\n\r\n\r\n","/*\r\n\r\n\r\nprops: {\r\n    text: string;\r\n    command: Function \r\n    icon: FontAwesomeIcon\r\n}\r\n*/\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\n\r\nfunction shouldClose(event) {\r\n    const isEscape = event.key == \"Escape\"\r\n    if (isEscape) AppDataController.closeMenu()\r\n}\r\n\r\nexport default function ActionMenuItem(props) {\r\n\r\n    return (\r\n        <button\r\n            onClick={() => props.command()}\r\n            class=\"action-item\"\r\n            onKeyDown={(e) => shouldClose(e)}\r\n            autoFocus\r\n        >\r\n            { props.icon && <FontAwesomeIcon icon= {props.icon}/> }\r\n            <div class=\"action-text\">\r\n                <p> {props.text} </p>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import ActionMenuItem from \"./ActionMenuItem.js\"\r\nimport \"../../css/action_list.css\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport { faMinus, faPlus } from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\n/*\r\nprops: {\r\n    menuItems: MenuItem[]\r\n}\r\n\r\nmenuItem {\r\n    text: string;\r\n\r\n    command: Function\r\n}\r\n*/\r\n\r\n\r\nfunction deleteAll() {\r\n    TaskDataController.deleteAllCompleted()\r\n    AppDataController.closeMenu()\r\n    AppDataController.showUndo()\r\n    setTimeout( () => {\r\n        AppDataController.hideUndo()\r\n    },3000)\r\n    \r\n}\r\nconst menuItems = [\r\n    {text: \"Clear Completed Tasks\", command:deleteAll, icon: faMinus},\r\n]\r\n\r\n\r\nexport default function ActionMenu(props) {\r\n    return (\r\n        <div >\r\n            <div className='action-container' >\r\n                {menuItems.map(menuItem => {\r\n                    return <ActionMenuItem  {...menuItem} key={menuItem.text}/>\r\n                })}\r\n            </div>\r\n            <div className='overlay' onClick={AppDataController.closeMenu}/>\r\n        </div>\r\n    )\r\n}","import \"../../css/bar.css\"\r\nimport \"../../css/todo.css\"\r\nimport \"../../css/completed.css\"\r\nimport SectionButton from \"./SectionButton\"\r\nimport FilterButton from \"./FilterButton\"\r\nimport DropDownButton from \"../Header/DropDownButton\";\r\nimport ActionMenu from \"../Action Commands/ActionMenu\";\r\n\r\nexport default function SectionBar(props) {\r\n    const classes = `bar ${props.className}`\r\n    console.log(props.hasCompletedTask)\r\n    return (\r\n        <div class={classes}>\r\n            <SectionButton\r\n                isToDo = { props.className === \"todo-bar\" }\r\n            />\r\n            <h1 class=\"bar-title\"> {props.sectionTitle} </h1>\r\n             <FilterButton isToDo={props.isToDo}/>\r\n            {!props.isToDo && <DropDownButton hasCompletedTasks={props.hasCompletedTask} />}\r\n             { !props.isToDo  &&  props.menuIsActive && <ActionMenu /> }\r\n        </div>  \r\n    )\r\n}","import { connect } from \"react-redux\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController.js\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController.js\"\r\nimport TaskList from \"../Tasks/TaskList.js\"\r\nimport SectionBar from \"./SectionBar.js\"\r\n\r\n/*\r\n@props: {\r\n    className: \"todo-bar| completed-bar\";\r\n    sectionTitle: string;\r\n    tasks: TaskItem[]\r\n    showContainer: boolean\r\n}\r\n*/\r\n\r\nfunction SectionContainer(props) {\r\n    return (\r\n\r\n\r\n    <div>\r\n        <SectionBar isToDo = {props.isToDo} hasCompletedTask = {props.hasCompletedTasks} menuIsActive = {props.menuIsActive} sectionTitle = {props.sectionTitle} className={props.className}/>\r\n        { props.showContainer && <TaskList tasks={props.tasks} />}\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state,ownProps) {\r\n    const isToDo = ownProps.sectionTitle === \"To Do\"\r\n\r\n    if (isToDo) return { \r\n        tasks: TaskDataController.todo(),\r\n        showContainer: AppDataController.showToDo(),\r\n        isToDo: true,\r\n        showSortMenu: state.showSortMenu\r\n    }\r\n\r\n    const hasCompletedTask = TaskDataController.completed().length > 0\r\n    console.log(hasCompletedTask)\r\n    return {\r\n        tasks: TaskDataController.completed(),\r\n        menuIsActive: AppDataController.menuIsActive(),\r\n        showContainer: AppDataController.showCompleted(),\r\n        hasCompletedTasks:hasCompletedTask,\r\n        isToDo: false,\r\n        showSortMenu: state.showSortMenu\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SectionContainer)","import \"../../css/action_button.css\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\"\r\nimport TaskDataController from \"../../modules/dataController/TaskDataController\";\r\n\r\nasync function undoTask() {\r\n    await TaskDataController.undoTaskDelete()\r\n    AppDataController.hideUndo()\r\n}\r\n\r\nexport default function UndoButton() {\r\n    return (\r\n        <div class=\"undo\">\r\n            <p> Completed tasks cleared</p>\r\n            <button\r\n                aria-label=\"Undo Cleared Tasks\"\r\n                alt=\"undo task clear\"\r\n                onClick={undoTask}\r\n                autoFocus\r\n            >\r\n                Undo\r\n            </button>\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n","import db from \"../db/index\"\r\nimport {COLLECTION_NAME,DEFAULT_DOC_ID} from \"./constants\"\r\nimport {NAME, PRIORITY, TIME} from \"../sorting/sortingAlgorithm\";\r\nconst collectionRef = db.collection(COLLECTION_NAME)\r\n\r\n\r\nexport default class TaskOrderController {\r\n\r\n    static async addSortField(field,isAscending) {\r\n        if (!TaskOrderController.hasValidField(field)) return\r\n\r\n        const sortFilters = await getSortFields()\r\n        if (!sortFilters) return\r\n        if (isAlreadyEnabled(field,sortFilters)) return\r\n        else enableFilter(sortFilters,field,!!isAscending)\r\n    }\r\n\r\n    static hasValidField(field) {\r\n        return field == NAME || field == PRIORITY || field == TIME\r\n    }\r\n\r\n    static async changeSortField(old,newField) {\r\n        if (!TaskOrderController.hasValidField(old)) return\r\n        if (!TaskOrderController.hasValidField(newField)) return\r\n\r\n        const sortFilters = await getSortFields()\r\n        const prevField = sortFilters.find(f => f.field == old)\r\n        const hasFieldAlready = sortFilters.find(f => f.field == newField)\r\n        if (!prevField) return\r\n        prevField.field = hasFieldAlready ? old : newField\r\n        await updateSortFields(sortFilters)\r\n    }\r\n\r\n    static async changeAscending(field,isAscending) {\r\n        const sortFilters = await getSortFields()\r\n        const prevField = sortFilters.find(f => f.field == field)\r\n        if (!prevField) return\r\n        prevField.isAscending = !!isAscending\r\n        await updateSortFields(sortFilters)\r\n\r\n\r\n    }\r\n\r\n    static async addRandomField() {\r\n        const sortFilters = await getSortFields()\r\n        if (!sortFilters) return\r\n\r\n        const hasName = !!sortFilters.find(f => f.field == \"name\")\r\n        const hasTime = !!sortFilters.find(f => f.field == \"time\")\r\n        const hasPriority = !!sortFilters.find(f => f.field == \"priority\")\r\n\r\n        if (!hasName) await TaskOrderController.addSortField(\"name\",true)\r\n        else if (!hasTime) await TaskOrderController.addSortField(\"time\",true)\r\n        else if (!hasPriority) await TaskOrderController.addSortField(\"priority\",true)\r\n\r\n\r\n    }\r\n\r\n    static async removeSortField(field) {\r\n        const sortFields = await getSortFields()\r\n        const doc = getDoc()\r\n        if (!sortFields) return\r\n        const newSortingFields = sortFields.filter(f => f.field !== field)\r\n        await updateSortFields(newSortingFields)\r\n    }\r\n\r\n    static async changeSortFieldOrder(field,newIndex) {\r\n        const sortFields = await getSortFields()\r\n        if (!sortFields || newIndex < 0 || newIndex >= sortFields.length) return\r\n\r\n        const currentIndex = getCurrentIndexOfField(field,sortFields)\r\n        if (currentIndex == -1 ) return\r\n\r\n        const entry = sortFields.splice(currentIndex,1)\r\n        sortFields.splice(newIndex,0,entry[0])\r\n\r\n        await updateSortFields(sortFields)\r\n    }\r\n\r\n}\r\n\r\nfunction getDoc() {\r\n    return collectionRef.doc(DEFAULT_DOC_ID)\r\n}\r\n\r\nasync function getSortFields() {\r\n    const data = await getDoc().get()\r\n    return data ? data.data().sortingFields : null\r\n}\r\n\r\nasync function updateSortFields(sortingFields) {\r\n    const doc = getDoc()\r\n    await doc.update({sortingFields})\r\n}\r\n\r\nfunction getCurrentIndexOfField(field,sortFields) {\r\n        for (let i = 0 ; i < sortFields.length ;i++) {\r\n            const data = sortFields[i]\r\n            if (data.field == field) return i\r\n        }\r\n        return -1\r\n}\r\n\r\nfunction isAlreadyEnabled(field,sortFilters) {\r\n    return !!sortFilters.find(filter => filter.field == field)\r\n}\r\n\r\nasync function enableFilter(sortingFields,field,isAscending) {\r\n    const doc = getDoc()\r\n    sortingFields.push({field,isAscending})\r\n    await updateSortFields(sortingFields)\r\n}\r\n\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus} from \"@fortawesome/free-solid-svg-icons\"\r\nimport TaskOrderController from \"../../modules/dataController/TaskOrderController\";\r\n\r\nasync function addFilterSection() {\r\n  await TaskOrderController.addRandomField()\r\n}\r\n\r\nexport default function AddFilterButton(props) {\r\n    const classes = props.sortingFields.length < 3\r\n        ? \"sortButton sort-button-color\"\r\n        : \"hide\"\r\n\r\n    return (\r\n        <button\r\n            onClick={addFilterSection}\r\n            className={classes}\r\n            aria-label=\"Add a Sort Field\"\r\n            autoFocus\r\n        >\r\n            <span> + Field </span>\r\n        </button>\r\n    )\r\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faWindowClose} from \"@fortawesome/free-solid-svg-icons\"\r\nimport AppDataController from \"../../modules/dataController/AppDataController\";\r\nimport focusRecentTaskOrLast from \"../../modules/focusRecentTaskOrLast\";\r\n\r\nfunction closeMenu() {\r\n    AppDataController.hideSortMenu()\r\n    const sortCloseButton = document.getElementById(\"filter-button\")\r\n    if (!sortCloseButton) return\r\n    sortCloseButton.focus()\r\n}\r\nexport default function CloseMenuButton(props) {\r\n    return (\r\n        <button\r\n            id=\"sort-close-button\"\r\n            className=\"sort-close-button sort-button-color\"\r\n            aria-label=\"Close Sort Filter\"\r\n            onClick={closeMenu}\r\n        >\r\n           <span> x </span>\r\n        </button>\r\n    )\r\n\r\n}","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\nimport \"../../../css/sort_entry.css\"\r\nimport {connect} from \"react-redux\"\r\n\r\nfunction EntryOrderButton(props) {\r\n\r\n    return (\r\n        <div>\r\n            <select\r\n                aria-label=\"Change Sorting Order\"\r\n                className=\"sort-order\"\r\n                onChange={ (result) => onOrderChange(props.field,parseInt(result.currentTarget.value))}\r\n                value={props.index}\r\n                autoFocus={props.index == 0}\r\n            >\r\n                {\r\n                    props.sortingFields.map((_,i) => {\r\n                        return <option key={i} value={i}> {i + 1} </option>\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nasync function onOrderChange(field,newOrder) {\r\n    console.log(newOrder)\r\n    await TaskOrderController.changeSortFieldOrder(field,newOrder)\r\n}\r\n\r\nfunction mapState(state) {\r\n    return {\r\n        sortingFields:state.sortingFields\r\n    }\r\n}\r\n\r\nexport default connect(mapState)(EntryOrderButton)\r\n\r\n","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\nimport \"../../../css/sort_entry.css\"\r\n\r\nfunction change(old,event) {\r\n    TaskOrderController.changeSortField(old,event.currentTarget.value)\r\n}\r\n\r\nexport default function SortCriteriaDropDown(props) {\r\n\r\n    return(\r\n        <div >\r\n            <label> By </label>\r\n            <select\r\n                aria-label=\"Sort By Dropdown\"\r\n                className=\"sort-type\"\r\n                onChange={(event) => change(props.field,event)}\r\n                value={props.field}\r\n            >\r\n                <option value='name' > Name </option>\r\n                <option value=\"time\"> Creation Date</option>\r\n                <option value=\"priority\"> Priority </option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSortAmountUp, faSortAmountDown} from \"@fortawesome/free-solid-svg-icons\"\r\nasync function change(field,value) {\r\n    await TaskOrderController.changeAscending(field,!value)\r\n}\r\n\r\nexport default function IsAscendingButton(props) {\r\n    const icon = props.isAscending ? faSortAmountUp :faSortAmountDown\r\n    return (\r\n        <div>\r\n            <button\r\n                className=\"direction-button\"\r\n                onClick={() => change(props.field,props.isAscending)}\r\n                aria-label={props.isAscending ? \"Sort in Descending Order\" : \"Sort in Ascending Order\"}\r\n            >\r\n                <FontAwesomeIcon icon={icon}></FontAwesomeIcon>\r\n            </button>\r\n        </div>\r\n\r\n    )\r\n}","import TaskOrderController from \"../../../modules/dataController/TaskOrderController\";\r\n\r\n\r\nfunction deleteSort(fieldName) {\r\n    TaskOrderController.removeSortField(fieldName)\r\n}\r\n\r\nexport default function DeleteButton(props) {\r\n\r\n    return (\r\n        <button\r\n            className=\"delete-button\"\r\n            onClick={() => deleteSort(props.field)}\r\n            aria-label=\"Delete Sorting Field\"\r\n        >\r\n            <span> x </span>\r\n        </button>\r\n    )\r\n}\r\n\r\n","import EntryOrderButton from \"./EntryOrderButton\";\r\nimport SortCriteriaDropDown from \"./SortCriteriaDropDown\";\r\nimport IsAscendingButton from \"./isAscendingButton\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport \"../../../css/sort_entry.css\"\r\n/*\r\n@props() {\r\nfield\r\nisAscending\r\nindex\r\n\r\n}\r\n */\r\n\r\nfunction ariaLabel({field,index,isAscending}) {\r\n    return `Sort by ${field} with index ${index} in ${isAscending ? \"ascending\" : \"descending\"} order`\r\n}\r\n\r\nexport default function SortEntryContainer(props) {\r\n    return (\r\n        <div\r\n            className=\"entry-container\"\r\n            aria-label={ariaLabel(props)}\r\n        >\r\n            <EntryOrderButton\r\n                field={props.field}\r\n                index={props.index}\r\n            />\r\n            <SortCriteriaDropDown\r\n                field={props.field}\r\n            />\r\n            <IsAscendingButton\r\n                isAscending={props.isAscending}\r\n                field={props.field}\r\n            />\r\n            <DeleteButton field={props.field}/>\r\n        </div>\r\n    )\r\n}","import \"../../css/sort_container.css\"\r\nimport AddFilterButton from \"./addFilterButton\"\r\nimport CloseMenuButton from \"./CloseMenuButton\"\r\nimport {connect} from \"react-redux\"\r\nimport SortEntryContainer from \"./SortEntry/SortEntryContainer\"\r\n\r\n\r\nfunction SortMenuContainer(props) {\r\n    return (\r\n        <div className=\"sort-container\">\r\n            <div className=\"sort-bar\">\r\n                <h2 className=\"sort-title\"> Sort </h2>\r\n                <div className='sort-section'>\r\n                    <AddFilterButton sortingFields={props.sortingFields}/>\r\n                    <CloseMenuButton/>\r\n                </div>\r\n            </div>\r\n            <div class='field-container'>\r\n                {\r\n                    props.sortingFields.map((data,index) => {\r\n                        return <SortEntryContainer key={index} index={index} {...data} />\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction mapToState(state) {\r\n    return {\r\n        sortingFields: state.sortingFields\r\n    }\r\n}\r\n\r\nexport default connect(mapToState)(SortMenuContainer)","import PriorityIcon from \"../PriorityIcon\";\r\nimport {connect} from \"react-redux\"\r\nimport TaskDataController from \"../../../modules/dataController/TaskDataController\";\r\n\r\nfunction changePriority(id,priority) {\r\n    TaskDataController.updateTaskPriority(id,priority)\r\n\r\n}\r\n\r\nfunction PriorityItem(props) {\r\n    const isSelection = props.priority == props.selection\r\n    const classes = isSelection ? \"priority-item priority-selection\"\r\n        : \"priority-item\"\r\n\r\n    return (\r\n        <button\r\n            aria-label={`Set Task Priority to ${props.priorityText}`}\r\n            className={classes}\r\n            tabIndex={0}\r\n            onClick={() => changePriority(props.id,props.priority)}\r\n            autoFocus={isSelection}\r\n        >\r\n            <span> {props.priorityText}</span>\r\n            <PriorityIcon priority={props.priority}/>\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction mapToState(state) {\r\n    const id = state.priorityMenuActiveID\r\n    const selection = state.tasks.find(task => task.id ==id).priority\r\n\r\n    return {\r\n        id,\r\n        selection,\r\n    }\r\n}\r\n\r\nexport default connect(mapToState)(PriorityItem)","import AppDataController from \"../../../modules/dataController/AppDataController\";\r\nimport focusRecentTaskOrLast from \"../../../modules/focusRecentTaskOrLast\";\r\n\r\nfunction closePriorityMenu() {\r\n    AppDataController.hidePriorityMenu()\r\n    focusRecentTaskOrLast()\r\n}\r\n\r\n\r\nexport default function PriorityCloseButton(props) {\r\n    return <button\r\n            className=\"priority-close-button\"\r\n            onClick={closePriorityMenu}\r\n            aria-label=\"Close Priority Selection Menu\"\r\n            >\r\n                <span> x </span>\r\n            </button>\r\n}","import PriorityCloseButton from \"./PriorityCloseButton\"\r\n\r\n\r\n\r\nexport default function PriorityMenuBar(props) {\r\n\r\n\r\n    return (\r\n        <div className=\"priority-menu-bar\">\r\n            <h2 className=\"priority-title\"> Priority </h2>\r\n            <PriorityCloseButton/>\r\n        </div>\r\n    )\r\n}","import PriorityItem from \"./PriorityItem\";\r\nimport PriorityMenuBar from \"./PriorityMenuBar\"\r\nimport \"../../../css/priority.css\"\r\n\r\nconst priorityData = [\r\n    {priorityText:\"No Priority\",priority:-1},\r\n    {priorityText: \"Low Priority\", priority:2},\r\n    {priorityText: \"Medium Priority\", priority:1},\r\n    {priorityText: \"High Priority\", priority:0}\r\n]\r\n\r\nexport default function PriorityMenuContainer(props) {\r\n    return (\r\n        <div className=\"priority-menu-container\">\r\n            <PriorityMenuBar/>\r\n            <div className=\"priority-item-container\">\r\n                {\r\n                    priorityData.map((data,index)=> {\r\n                        return <PriorityItem  index={index} key ={index} {...data}/>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import \"../../../css/task_menu.css\"\nimport AppDataController from \"../../../modules/dataController/AppDataController\";\nimport focusRecentTaskOrLast from \"../../../modules/focusRecentTaskOrLast\";\n\nfunction closeMenu() {\n    AppDataController.hideTaskMenu()\n    focusRecentTaskOrLast()\n}\n\n\n\nexport default function TaskMenuCloseButton(props) {\n    return (\n        <button\n            className=\"task-menu-close-button\"\n            onClick={closeMenu}\n            aria-label=\"Close Task Menu\"\n        >\n            Close\n        </button>\n    )\n}","import \"../../../css/task_menu.css\"\nimport {connect} from \"react-redux\";\nimport TaskDataController from \"../../../modules/dataController/TaskDataController\";\nimport AppDataController from \"../../../modules/dataController/AppDataController\";\nimport focusRecentTaskOrLast from \"../../../modules/focusRecentTaskOrLast\";\n\nasync function deleteTask(id) {\n    if (!id) return\n    AppDataController.hideTaskMenu()\n    await TaskDataController.deleteTask(id)\n    console.log(\"focusing\")\n    focusRecentTaskOrLast()\n\n}\n\nfunction TaskMenuDeleteButton({activeTask}) {\n\n\n    return (\n        <button\n            className=\"task-menu-delete-button\"\n            onClick={() => deleteTask(activeTask)}\n            aria-label=\"Delete Selected Task\"\n        >\n            Delete\n        </button>\n    )\n}\n\n\nfunction stateProps(state) {\n    return {\n        activeTask:state.activeTask\n    }\n}\n\n\nexport default connect(stateProps)(TaskMenuDeleteButton)\n\n\n\n","import TaskMenuCloseButton from \"./TaskMenuCloseButton\";\nimport TaskMenuDeleteButton from \"./TaskMenuDeleteButton\";\nimport \"../../../css/task_menu.css\"\n\nexport default function TaskMenuBar(props) {\n    return (\n        <div className=\"task-menu-bar\">\n            <h2 className=\"task-menu-title\"> Task </h2>\n            <div>\n                <TaskMenuDeleteButton/>\n                <TaskMenuCloseButton/>\n            </div>\n\n        </div>\n    )\n}","import TaskDataController from \"../../modules/dataController/TaskDataController\";\nimport {connect} from \"react-redux\";\nimport AppDataController from \"../../modules/dataController/AppDataController\";\n\nasync function updateActiveTask(event,id) {\n    const text = event.currentTarget.value\n    await TaskDataController.updateTaskText(id,text)\n}\nasync function shouldCreateNewTask(event) {\n    const isEnter = event.key === \"Enter\"\n    const inputForm = event.currentTarget\n\n\n    if (isEnter) {\n        const newID = await TaskDataController.createTask()\n        AppDataController.setActiveTask(newID)\n        inputForm.value = \"\"\n\n\n\n    }\n}\n\n\n\nfunction TaskEditor({activeTask,task}) {\n\n    return (\n        <div\n            className=\"task-editor-container\"\n        >\n          <input\n              id=\"task-editor\"\n              aria-label=\"Set Task Text\"\n              value={task ? task.text : \"\"}\n              autoFocus\n              onKeyPress={(e) => shouldCreateNewTask(e)}\n              onChange={ (e) => updateActiveTask(e,activeTask) }\n          />\n        </div>\n    )\n\n}\n\nfunction stateMap(state) {\n\n    return {\n        activeTask:state.activeTask,\n        task: TaskDataController.getTask(state.activeTask)\n    }\n}\n\nexport default connect(stateMap)(TaskEditor)","import TaskMenuBar from \"./TaskMenuBar/TaskMenuBar\";\nimport TaskEditor from \"./TaskEditor\";\nimport \"../../css/task_menu.css\"\n\nexport default function TaskMenu(props) {\n    return (\n        <div className=\"task-menu-container\">\n            <TaskMenuBar/>\n            <TaskEditor/>\n        </div>\n    )\n}","import \"./css/global.css\"\r\nimport \"typeface-roboto\"\r\nimport ActionButton from \"./components/Action Commands/ActionButton\";\r\nimport AppDataController from \"./modules/dataController/AppDataController\";\r\nimport Header from './components/Header/Header';\r\nimport SectionContainer from \"./components/Section/SectionContainer.js\"\r\nimport { connect } from \"react-redux\";\r\nimport UndoButton from \"./components/Undo/UndoButton\";\r\nimport SortMenuContainer from \"./components/SortMenu/SortMenuContainer\";\r\nimport PriorityMenu from \"./components/Priority/PriorityMenu/PriorityMenuContainer\"\r\nimport TaskMenu from \"./components/TaskMenu/TaskMenu\";\r\n\r\nfunction App({showTaskMenu,showUndo,showSortMenu,showPriorityMenu}) {\r\n  return (\r\n    <div class='container'>\r\n      <Header/>\r\n      <SectionContainer \r\n        className='todo-bar' \r\n        sectionTitle=\"To Do\"\r\n      />\r\n        {\r\n            !showSortMenu && !showPriorityMenu && <SectionContainer\r\n                className='completed-bar'\r\n                sectionTitle=\"Completed\"\r\n            />\r\n        }\r\n\r\n\r\n            <ActionButton/>\r\n      { showUndo && <UndoButton/> }\r\n    {showSortMenu && <SortMenuContainer/>}\r\n    {showPriorityMenu && <PriorityMenu/>}\r\n    {showTaskMenu && <TaskMenu/>}\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction mapToState(state) {\r\n  return {\r\n    menuIsActive: AppDataController.menuIsActive(),\r\n    showUndo: AppDataController.undoIsActive(),\r\n    showSortMenu: AppDataController.showSortMenu(),\r\n    showPriorityMenu: state.showPriorityMenu,\r\n    showTaskMenu: state.showTaskMenu\r\n  }\r\n}\r\nexport default connect(mapToState)(App)","import db from \"../db/index\"\r\nimport {updateSortingFieldsAction, updateTasksAction} from \"./actions\"\r\nimport store from \"./store\"\r\nimport {COLLECTION_NAME,DEFAULT_DOC_ID,TASK_SUBCOLLECTION} from \"./constants\"\r\nconst collectionRef = db.collection(COLLECTION_NAME)\r\n\r\nclass DataSyncController {\r\n    _db = db\r\n    _taskSubscription = null\r\n    _sortSubscription = null\r\n\r\n    async initSortingFields() {\r\n        await collectionRef.doc(DEFAULT_DOC_ID).update({sortingFields:[]})\r\n    }\r\n\r\n    setTaskSubscription(query) {\r\n        this._taskSubscription = query.onSnapshot( snapshot => {\r\n            const tasks = snapshot.docs.map(task => task.data())\r\n            const action = updateTasksAction(tasks)\r\n            store.dispatch(action)\r\n        })\r\n    }\r\n\r\n    setSortSubscription(query) {\r\n        this._sortSubscrption = query.onSnapshot(snapshot => {\r\n            const {sortingFields} = snapshot.data()\r\n\r\n            const action = updateSortingFieldsAction(sortingFields)\r\n            store.dispatch(action)\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport default new DataSyncController()","import DataSyncController from \"../dataController/DataSyncController\"\r\nimport {COLLECTION_NAME, DEFAULT_DOC_ID} from \"../dataController/constants\"\r\nimport db from \"../db/index\"\r\n\r\nconst collectionRef = db.collection(COLLECTION_NAME)\r\nconst tasks = collectionRef.doc(DEFAULT_DOC_ID).collection(\"tasks\")\r\nconst sortFilters = collectionRef.doc(DEFAULT_DOC_ID)\r\n\r\nexport default function () {\r\n    DataSyncController.setTaskSubscription(tasks)\r\n    DataSyncController.setSortSubscription(sortFilters)\r\n}","import {COLLECTION_NAME, DEFAULT_DOC_ID} from \"../dataController/constants\"\nimport db from \"../db/index\"\nimport initSubscriptions from \"./initSubscriptions\";\nconst collectionRef = db.collection(COLLECTION_NAME)\n\nexport default async function () {\n    const hasDoc = (await collectionRef.doc(DEFAULT_DOC_ID).get()).exists\n    if (!hasDoc) await collectionRef.doc(DEFAULT_DOC_ID).set({\n        sortingFields:[],\n        id:DEFAULT_DOC_ID,\n    })\n\n    initSubscriptions()\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from \"react-redux\"\r\nimport store from \"./modules/dataController/store.js\"\r\nimport init from \"./modules/setup/init\";\r\n\r\n\r\ninit()\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n"],"sourceRoot":""}